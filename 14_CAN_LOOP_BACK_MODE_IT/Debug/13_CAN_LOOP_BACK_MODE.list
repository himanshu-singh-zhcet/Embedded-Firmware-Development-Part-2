
13_CAN_LOOP_BACK_MODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000221c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080023e0  080023e0  000123e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023f8  080023f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080023f8  080023f8  000123f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002400  08002400  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002400  08002400  00012400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002404  08002404  00012404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  2000000c  08002414  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  08002414  00020054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006356  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001367  00000000  00000000  00026392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000588  00000000  00000000  00027700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004e0  00000000  00000000  00027c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a97  00000000  00000000  00028168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007016  00000000  00000000  00048bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7169  00000000  00000000  0004fc15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00116d7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001548  00000000  00000000  00116dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080023c8 	.word	0x080023c8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080023c8 	.word	0x080023c8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <SysTick_Handler>:
 *      Author: Himanshu Singh
 */

#include "main.h"

void SysTick_Handler(void){
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800050c:	f000 fa5a 	bl	80009c4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000510:	f000 ffd4 	bl	80014bc <HAL_SYSTICK_IRQHandler>
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}

08000518 <main>:
void CAN1_Rx(void);
void CAN_Filter_Config(void);

CAN_HandleTypeDef hcan1;

int main(void){
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	HAL_Init();
 800051c:	f000 fa00 	bl	8000920 <HAL_Init>
	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 8000520:	2032      	movs	r0, #50	; 0x32
 8000522:	f000 f839 	bl	8000598 <SystemClock_Config_HSE>
	GPIO_Init();
 8000526:	f000 f813 	bl	8000550 <GPIO_Init>
    CAN1_Init();
 800052a:	f000 f8bf 	bl	80006ac <CAN1_Init>
    CAN_Filter_Config();
 800052e:	f000 f943 	bl	80007b8 <CAN_Filter_Config>

    if(HAL_CAN_Start(&hcan1) != HAL_OK){
 8000532:	4806      	ldr	r0, [pc, #24]	; (800054c <main+0x34>)
 8000534:	f000 fc42 	bl	8000dbc <HAL_CAN_Start>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <main+0x2a>
    	Error_handler();
 800053e:	f000 f961 	bl	8000804 <Error_handler>
    }

    CAN1_Tx();
 8000542:	f000 f8e9 	bl	8000718 <CAN1_Tx>
    CAN1_Rx();
 8000546:	f000 f919 	bl	800077c <CAN1_Rx>


    while(1){
 800054a:	e7fe      	b.n	800054a <main+0x32>
 800054c:	20000028 	.word	0x20000028

08000550 <GPIO_Init>:
}


// High Level Initialization

void GPIO_Init(void){
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	603b      	str	r3, [r7, #0]
 800055a:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <GPIO_Init+0x40>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a0c      	ldr	r2, [pc, #48]	; (8000590 <GPIO_Init+0x40>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <GPIO_Init+0x40>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledpin;
	ledpin.Pin = GPIO_PIN_5;
 8000572:	2320      	movs	r3, #32
 8000574:	607b      	str	r3, [r7, #4]
	ledpin.Mode = GPIO_MODE_OUTPUT_PP;
 8000576:	2301      	movs	r3, #1
 8000578:	60bb      	str	r3, [r7, #8]
	ledpin.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&ledpin);
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	4619      	mov	r1, r3
 8000582:	4804      	ldr	r0, [pc, #16]	; (8000594 <GPIO_Init+0x44>)
 8000584:	f000 ffa8 	bl	80014d8 <HAL_GPIO_Init>
}
 8000588:	bf00      	nop
 800058a:	3718      	adds	r7, #24
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40023800 	.word	0x40023800
 8000594:	40020000 	.word	0x40020000

08000598 <SystemClock_Config_HSE>:

void SystemClock_Config_HSE(uint8_t clock_frequency){
 8000598:	b580      	push	{r7, lr}
 800059a:	b096      	sub	sp, #88	; 0x58
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	uint32_t FLatency = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	657b      	str	r3, [r7, #84]	; 0x54
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_HSE;
 80005a6:	2307      	movs	r3, #7
 80005a8:	623b      	str	r3, [r7, #32]
	osc_init.HSIState = RCC_HSI_ON;
 80005aa:	2301      	movs	r3, #1
 80005ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	osc_init.HSICalibrationValue = 16;
 80005ae:	2310      	movs	r3, #16
 80005b0:	633b      	str	r3, [r7, #48]	; 0x30
	osc_init.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	63bb      	str	r3, [r7, #56]	; 0x38
    osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b6:	2300      	movs	r3, #0
 80005b8:	63fb      	str	r3, [r7, #60]	; 0x3c

    switch(clock_frequency){
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b78      	cmp	r3, #120	; 0x78
 80005be:	d034      	beq.n	800062a <SystemClock_Config_HSE+0x92>
 80005c0:	2b78      	cmp	r3, #120	; 0x78
 80005c2:	dc6c      	bgt.n	800069e <SystemClock_Config_HSE+0x106>
 80005c4:	2b32      	cmp	r3, #50	; 0x32
 80005c6:	d002      	beq.n	80005ce <SystemClock_Config_HSE+0x36>
 80005c8:	2b54      	cmp	r3, #84	; 0x54
 80005ca:	d017      	beq.n	80005fc <SystemClock_Config_HSE+0x64>

    	 FLatency = FLASH_ACR_LATENCY_3WS;
    	 break;
    }
    default:
    	return;
 80005cc:	e067      	b.n	800069e <SystemClock_Config_HSE+0x106>
    	 osc_init.PLL.PLLM = 16;
 80005ce:	2310      	movs	r3, #16
 80005d0:	643b      	str	r3, [r7, #64]	; 0x40
    	 osc_init.PLL.PLLN = 100;
 80005d2:	2364      	movs	r3, #100	; 0x64
 80005d4:	647b      	str	r3, [r7, #68]	; 0x44
    	 osc_init.PLL.PLLP = 2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	64bb      	str	r3, [r7, #72]	; 0x48
    	 osc_init.PLL.PLLQ  = 2;
 80005da:	2302      	movs	r3, #2
 80005dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    	 clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80005de:	230f      	movs	r3, #15
 80005e0:	60fb      	str	r3, [r7, #12]
    	 clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2302      	movs	r3, #2
 80005e4:	613b      	str	r3, [r7, #16]
    	 clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
    	 clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ee:	61bb      	str	r3, [r7, #24]
    	 clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f4:	61fb      	str	r3, [r7, #28]
    	 FLatency = FLASH_ACR_LATENCY_1WS;
 80005f6:	2301      	movs	r3, #1
 80005f8:	657b      	str	r3, [r7, #84]	; 0x54
    	 break;
 80005fa:	e02d      	b.n	8000658 <SystemClock_Config_HSE+0xc0>
    	 osc_init.PLL.PLLM = 16;
 80005fc:	2310      	movs	r3, #16
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
    	 osc_init.PLL.PLLN = 168;
 8000600:	23a8      	movs	r3, #168	; 0xa8
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
    	 osc_init.PLL.PLLP = 2;
 8000604:	2302      	movs	r3, #2
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
    	 osc_init.PLL.PLLQ  = 2;
 8000608:	2302      	movs	r3, #2
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
    	 clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 800060c:	230f      	movs	r3, #15
 800060e:	60fb      	str	r3, [r7, #12]
    	 clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	2302      	movs	r3, #2
 8000612:	613b      	str	r3, [r7, #16]
    	 clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
    	 clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061c:	61bb      	str	r3, [r7, #24]
    	 clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000622:	61fb      	str	r3, [r7, #28]
    	 FLatency = FLASH_ACR_LATENCY_2WS;
 8000624:	2302      	movs	r3, #2
 8000626:	657b      	str	r3, [r7, #84]	; 0x54
    	 break;
 8000628:	e016      	b.n	8000658 <SystemClock_Config_HSE+0xc0>
    	 osc_init.PLL.PLLM = 16;
 800062a:	2310      	movs	r3, #16
 800062c:	643b      	str	r3, [r7, #64]	; 0x40
    	 osc_init.PLL.PLLN = 240;
 800062e:	23f0      	movs	r3, #240	; 0xf0
 8000630:	647b      	str	r3, [r7, #68]	; 0x44
    	 osc_init.PLL.PLLP = 2;
 8000632:	2302      	movs	r3, #2
 8000634:	64bb      	str	r3, [r7, #72]	; 0x48
    	 osc_init.PLL.PLLQ  = 2;
 8000636:	2302      	movs	r3, #2
 8000638:	64fb      	str	r3, [r7, #76]	; 0x4c
    	 clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 800063a:	230f      	movs	r3, #15
 800063c:	60fb      	str	r3, [r7, #12]
    	 clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2302      	movs	r3, #2
 8000640:	613b      	str	r3, [r7, #16]
    	 clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
    	 clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000646:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064a:	61bb      	str	r3, [r7, #24]
    	 clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800064c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000650:	61fb      	str	r3, [r7, #28]
    	 FLatency = FLASH_ACR_LATENCY_3WS;
 8000652:	2303      	movs	r3, #3
 8000654:	657b      	str	r3, [r7, #84]	; 0x54
    	 break;
 8000656:	bf00      	nop
    }
    if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
 8000658:	f107 0320 	add.w	r3, r7, #32
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fbf1 	bl	8001e44 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config_HSE+0xd4>
    	Error_handler();
 8000668:	f000 f8cc 	bl	8000804 <Error_handler>
    }
    if(HAL_RCC_ClockConfig(&clk_init,FLatency) != HAL_OK){
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000672:	4618      	mov	r0, r3
 8000674:	f001 f8c4 	bl	8001800 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config_HSE+0xea>
    		Error_handler();
 800067e:	f000 f8c1 	bl	8000804 <Error_handler>
    }

    //Systick configuration
    HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000682:	f001 f9a3 	bl	80019cc <HAL_RCC_GetHCLKFreq>
 8000686:	4603      	mov	r3, r0
 8000688:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <SystemClock_Config_HSE+0x110>)
 800068a:	fba2 2303 	umull	r2, r3, r2, r3
 800068e:	099b      	lsrs	r3, r3, #6
 8000690:	4618      	mov	r0, r3
 8000692:	f000 feea 	bl	800146a <HAL_SYSTICK_Config>
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000696:	2004      	movs	r0, #4
 8000698:	f000 fef4 	bl	8001484 <HAL_SYSTICK_CLKSourceConfig>
 800069c:	e000      	b.n	80006a0 <SystemClock_Config_HSE+0x108>
    	return;
 800069e:	bf00      	nop
}
 80006a0:	3758      	adds	r7, #88	; 0x58
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	10624dd3 	.word	0x10624dd3

080006ac <CAN1_Init>:

void CAN1_Init(void){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <CAN1_Init+0x64>)
 80006b2:	4a18      	ldr	r2, [pc, #96]	; (8000714 <CAN1_Init+0x68>)
 80006b4:	601a      	str	r2, [r3, #0]
	hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <CAN1_Init+0x64>)
 80006b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006bc:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoBusOff = DISABLE;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <CAN1_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoRetransmission = ENABLE;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <CAN1_Init+0x64>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoWakeUp = DISABLE;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <CAN1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <CAN1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <CAN1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <CAN1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	775a      	strb	r2, [r3, #29]

	//Settings related to CAN bit timings
	hcan1.Init.Prescaler = 32;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <CAN1_Init+0x64>)
 80006e4:	2220      	movs	r2, #32
 80006e6:	605a      	str	r2, [r3, #4]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <CAN1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <CAN1_Init+0x64>)
 80006f0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80006f4:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <CAN1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]

	if(HAL_CAN_Init(&hcan1) != HAL_OK){
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <CAN1_Init+0x64>)
 80006fe:	f000 f981 	bl	8000a04 <HAL_CAN_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <CAN1_Init+0x60>
		Error_handler();
 8000708:	f000 f87c 	bl	8000804 <Error_handler>
	}
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000028 	.word	0x20000028
 8000714:	40006400 	.word	0x40006400

08000718 <CAN1_Tx>:

void CAN1_Tx(void){
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;

	uint32_t TxMailbox;
	uint8_t our_message[5] = {'H','E','L','L','O'};
 800071e:	4a15      	ldr	r2, [pc, #84]	; (8000774 <CAN1_Tx+0x5c>)
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000726:	6018      	str	r0, [r3, #0]
 8000728:	3304      	adds	r3, #4
 800072a:	7019      	strb	r1, [r3, #0]

	TxHeader.DLC = 5;
 800072c:	2305      	movs	r3, #5
 800072e:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = 0x65D;
 8000730:	f240 635d 	movw	r3, #1629	; 0x65d
 8000734:	613b      	str	r3, [r7, #16]
	TxHeader.IDE = CAN_ID_STD;
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_AddTxMessage(&hcan1,&TxHeader,our_message,&TxMailbox)!= HAL_OK){
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	1d3a      	adds	r2, r7, #4
 8000744:	f107 0110 	add.w	r1, r7, #16
 8000748:	480b      	ldr	r0, [pc, #44]	; (8000778 <CAN1_Tx+0x60>)
 800074a:	f000 fb7b 	bl	8000e44 <HAL_CAN_AddTxMessage>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <CAN1_Tx+0x40>
		Error_handler();
 8000754:	f000 f856 	bl	8000804 <Error_handler>
	}
	while(HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox));
 8000758:	bf00      	nop
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	4619      	mov	r1, r3
 800075e:	4806      	ldr	r0, [pc, #24]	; (8000778 <CAN1_Tx+0x60>)
 8000760:	f000 fc4b 	bl	8000ffa <HAL_CAN_IsTxMessagePending>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1f7      	bne.n	800075a <CAN1_Tx+0x42>
}
 800076a:	bf00      	nop
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	; 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	080023e0 	.word	0x080023e0
 8000778:	20000028 	.word	0x20000028

0800077c <CAN1_Rx>:

void CAN1_Rx(void){
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rcvd_msg[5];
	// we are waiting for at least one message in to the RX FIFO0
	while(! HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0));
 8000782:	bf00      	nop
 8000784:	2100      	movs	r1, #0
 8000786:	480b      	ldr	r0, [pc, #44]	; (80007b4 <CAN1_Rx+0x38>)
 8000788:	f000 fd6d 	bl	8001266 <HAL_CAN_GetRxFifoFillLevel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0f8      	beq.n	8000784 <CAN1_Rx+0x8>
	if(HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0,&RxHeader,rcvd_msg) != HAL_OK){
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	f107 020c 	add.w	r2, r7, #12
 8000798:	2100      	movs	r1, #0
 800079a:	4806      	ldr	r0, [pc, #24]	; (80007b4 <CAN1_Rx+0x38>)
 800079c:	f000 fc51 	bl	8001042 <HAL_CAN_GetRxMessage>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <CAN1_Rx+0x2e>
		Error_handler();
 80007a6:	f000 f82d 	bl	8000804 <Error_handler>
	}

	// sprintf(msg,"Message Recieved : %s\r\n",rcvd_msg);

}
 80007aa:	bf00      	nop
 80007ac:	3728      	adds	r7, #40	; 0x28
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000028 	.word	0x20000028

080007b8 <CAN_Filter_Config>:

void CAN_Filter_Config(void){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter_init;
	can1_filter_init.FilterActivation = ENABLE;
 80007be:	2301      	movs	r3, #1
 80007c0:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank =  0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0X0000;
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0X0000;
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0x0000;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 80007de:	2301      	movs	r3, #1
 80007e0:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&hcan1, &can1_filter_init) != HAL_OK){
 80007e2:	463b      	mov	r3, r7
 80007e4:	4619      	mov	r1, r3
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <CAN_Filter_Config+0x48>)
 80007e8:	f000 fa08 	bl	8000bfc <HAL_CAN_ConfigFilter>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <CAN_Filter_Config+0x3e>
		Error_handler();
 80007f2:	f000 f807 	bl	8000804 <Error_handler>
	}


}
 80007f6:	bf00      	nop
 80007f8:	3728      	adds	r7, #40	; 0x28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000028 	.word	0x20000028

08000804 <Error_handler>:
void Error_handler(void){
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  while (1){
 8000808:	e7fe      	b.n	8000808 <Error_handler+0x4>
	...

0800080c <HAL_MspInit>:
 */

#include "main.h"

// Low level Initialization
void HAL_MspInit(void){
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	 //Here will do low level processor specific inits.

	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000810:	2003      	movs	r0, #3
 8000812:	f000 fe03 	bl	800141c <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <HAL_MspInit+0x40>)
 8000818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800081a:	4a0c      	ldr	r2, [pc, #48]	; (800084c <HAL_MspInit+0x40>)
 800081c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000820:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	f06f 000b 	mvn.w	r0, #11
 800082a:	f000 fe02 	bl	8001432 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	f06f 000a 	mvn.w	r0, #10
 8000836:	f000 fdfc 	bl	8001432 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	f06f 0009 	mvn.w	r0, #9
 8000842:	f000 fdf6 	bl	8001432 <HAL_NVIC_SetPriority>
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <HAL_CAN_MspInit>:


void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan){
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_CAN1_CLK_ENABLE();
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <HAL_CAN_MspInit+0x50>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	4a0f      	ldr	r2, [pc, #60]	; (80008a0 <HAL_CAN_MspInit+0x50>)
 8000862:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000866:	6413      	str	r3, [r2, #64]	; 0x40
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <HAL_CAN_MspInit+0x50>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
	/** CAN1 GPIO Configuration
	 * PA11 ----->  CAN1_RX
	 * PA12 ----->  CAN1_TX
	 */

	GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000874:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000878:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000882:	2303      	movs	r3, #3
 8000884:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000886:	2309      	movs	r3, #9
 8000888:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4619      	mov	r1, r3
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <HAL_CAN_MspInit+0x54>)
 8000892:	f000 fe21 	bl	80014d8 <HAL_GPIO_Init>

}
 8000896:	bf00      	nop
 8000898:	3720      	adds	r7, #32
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020000 	.word	0x40020000

080008a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <SystemInit+0x20>)
 80008ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b2:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <SystemInit+0x20>)
 80008b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000904 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008d2:	490e      	ldr	r1, [pc, #56]	; (800090c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008d4:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d8:	e002      	b.n	80008e0 <LoopCopyDataInit>

080008da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008de:	3304      	adds	r3, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e4:	d3f9      	bcc.n	80008da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e6:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008e8:	4c0b      	ldr	r4, [pc, #44]	; (8000918 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ec:	e001      	b.n	80008f2 <LoopFillZerobss>

080008ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f0:	3204      	adds	r2, #4

080008f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f4:	d3fb      	bcc.n	80008ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008f6:	f7ff ffd7 	bl	80008a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008fa:	f001 fd41 	bl	8002380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008fe:	f7ff fe0b 	bl	8000518 <main>
  bx  lr    
 8000902:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000904:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800090c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000910:	08002408 	.word	0x08002408
  ldr r2, =_sbss
 8000914:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000918:	20000054 	.word	0x20000054

0800091c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800091c:	e7fe      	b.n	800091c <ADC_IRQHandler>
	...

08000920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <HAL_Init+0x40>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <HAL_Init+0x40>)
 800092a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800092e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_Init+0x40>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <HAL_Init+0x40>)
 8000936:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800093a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_Init+0x40>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a07      	ldr	r2, [pc, #28]	; (8000960 <HAL_Init+0x40>)
 8000942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000946:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000948:	2003      	movs	r0, #3
 800094a:	f000 fd67 	bl	800141c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800094e:	2000      	movs	r0, #0
 8000950:	f000 f808 	bl	8000964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000954:	f7ff ff5a 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023c00 	.word	0x40023c00

08000964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <HAL_InitTick+0x54>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_InitTick+0x58>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4619      	mov	r1, r3
 8000976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097a:	fbb3 f3f1 	udiv	r3, r3, r1
 800097e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000982:	4618      	mov	r0, r3
 8000984:	f000 fd71 	bl	800146a <HAL_SYSTICK_Config>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	e00e      	b.n	80009b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b0f      	cmp	r3, #15
 8000996:	d80a      	bhi.n	80009ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000998:	2200      	movs	r2, #0
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	f04f 30ff 	mov.w	r0, #4294967295
 80009a0:	f000 fd47 	bl	8001432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a4:	4a06      	ldr	r2, [pc, #24]	; (80009c0 <HAL_InitTick+0x5c>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
 80009ac:	e000      	b.n	80009b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000000 	.word	0x20000000
 80009bc:	20000008 	.word	0x20000008
 80009c0:	20000004 	.word	0x20000004

080009c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_IncTick+0x20>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_IncTick+0x24>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <HAL_IncTick+0x24>)
 80009d6:	6013      	str	r3, [r2, #0]
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20000008 	.word	0x20000008
 80009e8:	20000050 	.word	0x20000050

080009ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return uwTick;
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <HAL_GetTick+0x14>)
 80009f2:	681b      	ldr	r3, [r3, #0]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000050 	.word	0x20000050

08000a04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d101      	bne.n	8000a16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e0ed      	b.n	8000bf2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d102      	bne.n	8000a28 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff ff14 	bl	8000850 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f042 0201 	orr.w	r2, r2, #1
 8000a36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a38:	f7ff ffd8 	bl	80009ec <HAL_GetTick>
 8000a3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a3e:	e012      	b.n	8000a66 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a40:	f7ff ffd4 	bl	80009ec <HAL_GetTick>
 8000a44:	4602      	mov	r2, r0
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	2b0a      	cmp	r3, #10
 8000a4c:	d90b      	bls.n	8000a66 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2205      	movs	r2, #5
 8000a5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e0c5      	b.n	8000bf2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d0e5      	beq.n	8000a40 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f022 0202 	bic.w	r2, r2, #2
 8000a82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a84:	f7ff ffb2 	bl	80009ec <HAL_GetTick>
 8000a88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a8a:	e012      	b.n	8000ab2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a8c:	f7ff ffae 	bl	80009ec <HAL_GetTick>
 8000a90:	4602      	mov	r2, r0
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	2b0a      	cmp	r3, #10
 8000a98:	d90b      	bls.n	8000ab2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2205      	movs	r2, #5
 8000aaa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e09f      	b.n	8000bf2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f003 0302 	and.w	r3, r3, #2
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d1e5      	bne.n	8000a8c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	7e1b      	ldrb	r3, [r3, #24]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d108      	bne.n	8000ada <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	e007      	b.n	8000aea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ae8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	7e5b      	ldrb	r3, [r3, #25]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d108      	bne.n	8000b04 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	e007      	b.n	8000b14 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	7e9b      	ldrb	r3, [r3, #26]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d108      	bne.n	8000b2e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f042 0220 	orr.w	r2, r2, #32
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	e007      	b.n	8000b3e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f022 0220 	bic.w	r2, r2, #32
 8000b3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	7edb      	ldrb	r3, [r3, #27]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d108      	bne.n	8000b58 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f022 0210 	bic.w	r2, r2, #16
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	e007      	b.n	8000b68 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f042 0210 	orr.w	r2, r2, #16
 8000b66:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	7f1b      	ldrb	r3, [r3, #28]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d108      	bne.n	8000b82 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f042 0208 	orr.w	r2, r2, #8
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	e007      	b.n	8000b92 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f022 0208 	bic.w	r2, r2, #8
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	7f5b      	ldrb	r3, [r3, #29]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d108      	bne.n	8000bac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f042 0204 	orr.w	r2, r2, #4
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	e007      	b.n	8000bbc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f022 0204 	bic.w	r2, r2, #4
 8000bba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	689a      	ldr	r2, [r3, #8]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	691b      	ldr	r3, [r3, #16]
 8000bca:	431a      	orrs	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	695b      	ldr	r3, [r3, #20]
 8000bd0:	ea42 0103 	orr.w	r1, r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	1e5a      	subs	r2, r3, #1
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	430a      	orrs	r2, r1
 8000be0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2201      	movs	r2, #1
 8000bec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b087      	sub	sp, #28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c12:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c14:	7cfb      	ldrb	r3, [r7, #19]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d003      	beq.n	8000c22 <HAL_CAN_ConfigFilter+0x26>
 8000c1a:	7cfb      	ldrb	r3, [r7, #19]
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	f040 80be 	bne.w	8000d9e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000c22:	4b65      	ldr	r3, [pc, #404]	; (8000db8 <HAL_CAN_ConfigFilter+0x1bc>)
 8000c24:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c2c:	f043 0201 	orr.w	r2, r3, #1
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c3c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c50:	021b      	lsls	r3, r3, #8
 8000c52:	431a      	orrs	r2, r3
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	f003 031f 	and.w	r3, r3, #31
 8000c62:	2201      	movs	r2, #1
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	43db      	mvns	r3, r3
 8000c74:	401a      	ands	r2, r3
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	69db      	ldr	r3, [r3, #28]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d123      	bne.n	8000ccc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ca2:	683a      	ldr	r2, [r7, #0]
 8000ca4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ca6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	3248      	adds	r2, #72	; 0x48
 8000cac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cc0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cc2:	6979      	ldr	r1, [r7, #20]
 8000cc4:	3348      	adds	r3, #72	; 0x48
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	440b      	add	r3, r1
 8000cca:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	69db      	ldr	r3, [r3, #28]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d122      	bne.n	8000d1a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000cf4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	3248      	adds	r2, #72	; 0x48
 8000cfa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d0e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d10:	6979      	ldr	r1, [r7, #20]
 8000d12:	3348      	adds	r3, #72	; 0x48
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	440b      	add	r3, r1
 8000d18:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d109      	bne.n	8000d36 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	401a      	ands	r2, r3
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000d34:	e007      	b.n	8000d46 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	691b      	ldr	r3, [r3, #16]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d109      	bne.n	8000d62 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	43db      	mvns	r3, r3
 8000d58:	401a      	ands	r2, r3
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000d60:	e007      	b.n	8000d72 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	6a1b      	ldr	r3, [r3, #32]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d107      	bne.n	8000d8a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	431a      	orrs	r2, r3
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d90:	f023 0201 	bic.w	r2, r3, #1
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e006      	b.n	8000dac <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
  }
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	371c      	adds	r7, #28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	40006400 	.word	0x40006400

08000dbc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d12e      	bne.n	8000e2e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f022 0201 	bic.w	r2, r2, #1
 8000de6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000de8:	f7ff fe00 	bl	80009ec <HAL_GetTick>
 8000dec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000dee:	e012      	b.n	8000e16 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000df0:	f7ff fdfc 	bl	80009ec <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	2b0a      	cmp	r3, #10
 8000dfc:	d90b      	bls.n	8000e16 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2205      	movs	r2, #5
 8000e0e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e012      	b.n	8000e3c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d1e5      	bne.n	8000df0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	e006      	b.n	8000e3c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
  }
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	; 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e58:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e62:	7ffb      	ldrb	r3, [r7, #31]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d003      	beq.n	8000e70 <HAL_CAN_AddTxMessage+0x2c>
 8000e68:	7ffb      	ldrb	r3, [r7, #31]
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	f040 80b8 	bne.w	8000fe0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d10a      	bne.n	8000e90 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d105      	bne.n	8000e90 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 80a0 	beq.w	8000fd0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	0e1b      	lsrs	r3, r3, #24
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d907      	bls.n	8000eb0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e09e      	b.n	8000fee <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	409a      	lsls	r2, r3
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d10d      	bne.n	8000ede <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ecc:	68f9      	ldr	r1, [r7, #12]
 8000ece:	6809      	ldr	r1, [r1, #0]
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3318      	adds	r3, #24
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	440b      	add	r3, r1
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	e00f      	b.n	8000efe <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ee8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000eee:	68f9      	ldr	r1, [r7, #12]
 8000ef0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000ef2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	3318      	adds	r3, #24
 8000ef8:	011b      	lsls	r3, r3, #4
 8000efa:	440b      	add	r3, r1
 8000efc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6819      	ldr	r1, [r3, #0]
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	691a      	ldr	r2, [r3, #16]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	3318      	adds	r3, #24
 8000f0a:	011b      	lsls	r3, r3, #4
 8000f0c:	440b      	add	r3, r1
 8000f0e:	3304      	adds	r3, #4
 8000f10:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	7d1b      	ldrb	r3, [r3, #20]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d111      	bne.n	8000f3e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3318      	adds	r3, #24
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	4413      	add	r3, r2
 8000f26:	3304      	adds	r3, #4
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	6811      	ldr	r1, [r2, #0]
 8000f2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3318      	adds	r3, #24
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	440b      	add	r3, r1
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3307      	adds	r3, #7
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	061a      	lsls	r2, r3, #24
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3306      	adds	r3, #6
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	041b      	lsls	r3, r3, #16
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3305      	adds	r3, #5
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	021b      	lsls	r3, r3, #8
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	3204      	adds	r2, #4
 8000f5e:	7812      	ldrb	r2, [r2, #0]
 8000f60:	4610      	mov	r0, r2
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	6811      	ldr	r1, [r2, #0]
 8000f66:	ea43 0200 	orr.w	r2, r3, r0
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	011b      	lsls	r3, r3, #4
 8000f6e:	440b      	add	r3, r1
 8000f70:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000f74:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3303      	adds	r3, #3
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	061a      	lsls	r2, r3, #24
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3302      	adds	r3, #2
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	041b      	lsls	r3, r3, #16
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	4313      	orrs	r3, r2
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	7812      	ldrb	r2, [r2, #0]
 8000f96:	4610      	mov	r0, r2
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	6811      	ldr	r1, [r2, #0]
 8000f9c:	ea43 0200 	orr.w	r2, r3, r0
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	011b      	lsls	r3, r3, #4
 8000fa4:	440b      	add	r3, r1
 8000fa6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000faa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	3318      	adds	r3, #24
 8000fb4:	011b      	lsls	r3, r3, #4
 8000fb6:	4413      	add	r3, r2
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	6811      	ldr	r1, [r2, #0]
 8000fbe:	f043 0201 	orr.w	r2, r3, #1
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	3318      	adds	r3, #24
 8000fc6:	011b      	lsls	r3, r3, #4
 8000fc8:	440b      	add	r3, r1
 8000fca:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	e00e      	b.n	8000fee <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e006      	b.n	8000fee <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
  }
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	; 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b085      	sub	sp, #20
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800100e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001010:	7afb      	ldrb	r3, [r7, #11]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d002      	beq.n	800101c <HAL_CAN_IsTxMessagePending+0x22>
 8001016:	7afb      	ldrb	r3, [r7, #11]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d10b      	bne.n	8001034 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	069b      	lsls	r3, r3, #26
 8001026:	401a      	ands	r2, r3
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	069b      	lsls	r3, r3, #26
 800102c:	429a      	cmp	r2, r3
 800102e:	d001      	beq.n	8001034 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001030:	2301      	movs	r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001034:	68fb      	ldr	r3, [r7, #12]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001042:	b480      	push	{r7}
 8001044:	b087      	sub	sp, #28
 8001046:	af00      	add	r7, sp, #0
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001056:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001058:	7dfb      	ldrb	r3, [r7, #23]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d003      	beq.n	8001066 <HAL_CAN_GetRxMessage+0x24>
 800105e:	7dfb      	ldrb	r3, [r7, #23]
 8001060:	2b02      	cmp	r3, #2
 8001062:	f040 80f3 	bne.w	800124c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10e      	bne.n	800108a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d116      	bne.n	80010a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e0e7      	b.n	800125a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d107      	bne.n	80010a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e0d8      	b.n	800125a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	331b      	adds	r3, #27
 80010b0:	011b      	lsls	r3, r3, #4
 80010b2:	4413      	add	r3, r2
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0204 	and.w	r2, r3, #4
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10c      	bne.n	80010e0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	331b      	adds	r3, #27
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	4413      	add	r3, r2
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	0d5b      	lsrs	r3, r3, #21
 80010d6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	e00b      	b.n	80010f8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	331b      	adds	r3, #27
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	4413      	add	r3, r2
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	08db      	lsrs	r3, r3, #3
 80010f0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	331b      	adds	r3, #27
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	4413      	add	r3, r2
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0202 	and.w	r2, r3, #2
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	331b      	adds	r3, #27
 8001116:	011b      	lsls	r3, r3, #4
 8001118:	4413      	add	r3, r2
 800111a:	3304      	adds	r3, #4
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 020f 	and.w	r2, r3, #15
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	331b      	adds	r3, #27
 800112e:	011b      	lsls	r3, r3, #4
 8001130:	4413      	add	r3, r2
 8001132:	3304      	adds	r3, #4
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	0a1b      	lsrs	r3, r3, #8
 8001138:	b2da      	uxtb	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	331b      	adds	r3, #27
 8001146:	011b      	lsls	r3, r3, #4
 8001148:	4413      	add	r3, r2
 800114a:	3304      	adds	r3, #4
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	0c1b      	lsrs	r3, r3, #16
 8001150:	b29a      	uxth	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	4413      	add	r3, r2
 8001160:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	011b      	lsls	r3, r3, #4
 8001174:	4413      	add	r3, r2
 8001176:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	0a1a      	lsrs	r2, r3, #8
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	011b      	lsls	r3, r3, #4
 800118e:	4413      	add	r3, r2
 8001190:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	0c1a      	lsrs	r2, r3, #16
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	3302      	adds	r3, #2
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	011b      	lsls	r3, r3, #4
 80011a8:	4413      	add	r3, r2
 80011aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	0e1a      	lsrs	r2, r3, #24
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	3303      	adds	r3, #3
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	4413      	add	r3, r2
 80011c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	3304      	adds	r3, #4
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	011b      	lsls	r3, r3, #4
 80011da:	4413      	add	r3, r2
 80011dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	0a1a      	lsrs	r2, r3, #8
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	3305      	adds	r3, #5
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	4413      	add	r3, r2
 80011f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	0c1a      	lsrs	r2, r3, #16
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	3306      	adds	r3, #6
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	4413      	add	r3, r2
 8001210:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	0e1a      	lsrs	r2, r3, #24
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	3307      	adds	r3, #7
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d108      	bne.n	8001238 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68da      	ldr	r2, [r3, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 0220 	orr.w	r2, r2, #32
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	e007      	b.n	8001248 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	691a      	ldr	r2, [r3, #16]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 0220 	orr.w	r2, r2, #32
 8001246:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	e006      	b.n	800125a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001250:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
  }
}
 800125a:	4618      	mov	r0, r3
 800125c:	371c      	adds	r7, #28
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001266:	b480      	push	{r7}
 8001268:	b085      	sub	sp, #20
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 3020 	ldrb.w	r3, [r3, #32]
 800127a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800127c:	7afb      	ldrb	r3, [r7, #11]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d002      	beq.n	8001288 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001282:	7afb      	ldrb	r3, [r7, #11]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d10f      	bne.n	80012a8 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d106      	bne.n	800129c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	e005      	b.n	80012a8 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80012a8:	68fb      	ldr	r3, [r7, #12]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d4:	4013      	ands	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ea:	4a04      	ldr	r2, [pc, #16]	; (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	60d3      	str	r3, [r2, #12]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <__NVIC_GetPriorityGrouping+0x18>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	f003 0307 	and.w	r3, r3, #7
}
 800130e:	4618      	mov	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	2b00      	cmp	r3, #0
 800132e:	db0a      	blt.n	8001346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	b2da      	uxtb	r2, r3
 8001334:	490c      	ldr	r1, [pc, #48]	; (8001368 <__NVIC_SetPriority+0x4c>)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	0112      	lsls	r2, r2, #4
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	440b      	add	r3, r1
 8001340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001344:	e00a      	b.n	800135c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4908      	ldr	r1, [pc, #32]	; (800136c <__NVIC_SetPriority+0x50>)
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	3b04      	subs	r3, #4
 8001354:	0112      	lsls	r2, r2, #4
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	440b      	add	r3, r1
 800135a:	761a      	strb	r2, [r3, #24]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000e100 	.word	0xe000e100
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	; 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f1c3 0307 	rsb	r3, r3, #7
 800138a:	2b04      	cmp	r3, #4
 800138c:	bf28      	it	cs
 800138e:	2304      	movcs	r3, #4
 8001390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3304      	adds	r3, #4
 8001396:	2b06      	cmp	r3, #6
 8001398:	d902      	bls.n	80013a0 <NVIC_EncodePriority+0x30>
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3b03      	subs	r3, #3
 800139e:	e000      	b.n	80013a2 <NVIC_EncodePriority+0x32>
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43da      	mvns	r2, r3
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	401a      	ands	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b8:	f04f 31ff 	mov.w	r1, #4294967295
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	43d9      	mvns	r1, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	4313      	orrs	r3, r2
         );
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3724      	adds	r7, #36	; 0x24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e8:	d301      	bcc.n	80013ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00f      	b.n	800140e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <SysTick_Config+0x40>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f6:	210f      	movs	r1, #15
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f7ff ff8e 	bl	800131c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <SysTick_Config+0x40>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001406:	4b04      	ldr	r3, [pc, #16]	; (8001418 <SysTick_Config+0x40>)
 8001408:	2207      	movs	r2, #7
 800140a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	e000e010 	.word	0xe000e010

0800141c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ff47 	bl	80012b8 <__NVIC_SetPriorityGrouping>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001444:	f7ff ff5c 	bl	8001300 <__NVIC_GetPriorityGrouping>
 8001448:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	6978      	ldr	r0, [r7, #20]
 8001450:	f7ff ff8e 	bl	8001370 <NVIC_EncodePriority>
 8001454:	4602      	mov	r2, r0
 8001456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff5d 	bl	800131c <__NVIC_SetPriority>
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ffb0 	bl	80013d8 <SysTick_Config>
 8001478:	4603      	mov	r3, r0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b04      	cmp	r3, #4
 8001490:	d106      	bne.n	80014a0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800149e:	e005      	b.n	80014ac <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80014a6:	f023 0304 	bic.w	r3, r3, #4
 80014aa:	6013      	str	r3, [r2, #0]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000e010 	.word	0xe000e010

080014bc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80014c0:	f000 f802 	bl	80014c8 <HAL_SYSTICK_Callback>
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	; 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
 80014f2:	e165      	b.n	80017c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014f4:	2201      	movs	r2, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	429a      	cmp	r2, r3
 800150e:	f040 8154 	bne.w	80017ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	2b01      	cmp	r3, #1
 800151c:	d005      	beq.n	800152a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001526:	2b02      	cmp	r3, #2
 8001528:	d130      	bne.n	800158c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	2203      	movs	r2, #3
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	68da      	ldr	r2, [r3, #12]
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001560:	2201      	movs	r2, #1
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	f003 0201 	and.w	r2, r3, #1
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	2b03      	cmp	r3, #3
 8001596:	d017      	beq.n	80015c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d123      	bne.n	800161c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	08da      	lsrs	r2, r3, #3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3208      	adds	r2, #8
 80015dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	220f      	movs	r2, #15
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	691a      	ldr	r2, [r3, #16]
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	08da      	lsrs	r2, r3, #3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3208      	adds	r2, #8
 8001616:	69b9      	ldr	r1, [r7, #24]
 8001618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	2203      	movs	r2, #3
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0203 	and.w	r2, r3, #3
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 80ae 	beq.w	80017ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b5d      	ldr	r3, [pc, #372]	; (80017d8 <HAL_GPIO_Init+0x300>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	4a5c      	ldr	r2, [pc, #368]	; (80017d8 <HAL_GPIO_Init+0x300>)
 8001668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800166c:	6453      	str	r3, [r2, #68]	; 0x44
 800166e:	4b5a      	ldr	r3, [pc, #360]	; (80017d8 <HAL_GPIO_Init+0x300>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800167a:	4a58      	ldr	r2, [pc, #352]	; (80017dc <HAL_GPIO_Init+0x304>)
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	3302      	adds	r3, #2
 8001682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	220f      	movs	r2, #15
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4f      	ldr	r2, [pc, #316]	; (80017e0 <HAL_GPIO_Init+0x308>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d025      	beq.n	80016f2 <HAL_GPIO_Init+0x21a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4e      	ldr	r2, [pc, #312]	; (80017e4 <HAL_GPIO_Init+0x30c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d01f      	beq.n	80016ee <HAL_GPIO_Init+0x216>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4d      	ldr	r2, [pc, #308]	; (80017e8 <HAL_GPIO_Init+0x310>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d019      	beq.n	80016ea <HAL_GPIO_Init+0x212>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4c      	ldr	r2, [pc, #304]	; (80017ec <HAL_GPIO_Init+0x314>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d013      	beq.n	80016e6 <HAL_GPIO_Init+0x20e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4b      	ldr	r2, [pc, #300]	; (80017f0 <HAL_GPIO_Init+0x318>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d00d      	beq.n	80016e2 <HAL_GPIO_Init+0x20a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4a      	ldr	r2, [pc, #296]	; (80017f4 <HAL_GPIO_Init+0x31c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d007      	beq.n	80016de <HAL_GPIO_Init+0x206>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a49      	ldr	r2, [pc, #292]	; (80017f8 <HAL_GPIO_Init+0x320>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d101      	bne.n	80016da <HAL_GPIO_Init+0x202>
 80016d6:	2306      	movs	r3, #6
 80016d8:	e00c      	b.n	80016f4 <HAL_GPIO_Init+0x21c>
 80016da:	2307      	movs	r3, #7
 80016dc:	e00a      	b.n	80016f4 <HAL_GPIO_Init+0x21c>
 80016de:	2305      	movs	r3, #5
 80016e0:	e008      	b.n	80016f4 <HAL_GPIO_Init+0x21c>
 80016e2:	2304      	movs	r3, #4
 80016e4:	e006      	b.n	80016f4 <HAL_GPIO_Init+0x21c>
 80016e6:	2303      	movs	r3, #3
 80016e8:	e004      	b.n	80016f4 <HAL_GPIO_Init+0x21c>
 80016ea:	2302      	movs	r3, #2
 80016ec:	e002      	b.n	80016f4 <HAL_GPIO_Init+0x21c>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <HAL_GPIO_Init+0x21c>
 80016f2:	2300      	movs	r3, #0
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	f002 0203 	and.w	r2, r2, #3
 80016fa:	0092      	lsls	r2, r2, #2
 80016fc:	4093      	lsls	r3, r2
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001704:	4935      	ldr	r1, [pc, #212]	; (80017dc <HAL_GPIO_Init+0x304>)
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	3302      	adds	r3, #2
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001712:	4b3a      	ldr	r3, [pc, #232]	; (80017fc <HAL_GPIO_Init+0x324>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	43db      	mvns	r3, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4013      	ands	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001736:	4a31      	ldr	r2, [pc, #196]	; (80017fc <HAL_GPIO_Init+0x324>)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800173c:	4b2f      	ldr	r3, [pc, #188]	; (80017fc <HAL_GPIO_Init+0x324>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001760:	4a26      	ldr	r2, [pc, #152]	; (80017fc <HAL_GPIO_Init+0x324>)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001766:	4b25      	ldr	r3, [pc, #148]	; (80017fc <HAL_GPIO_Init+0x324>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800178a:	4a1c      	ldr	r2, [pc, #112]	; (80017fc <HAL_GPIO_Init+0x324>)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001790:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <HAL_GPIO_Init+0x324>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017b4:	4a11      	ldr	r2, [pc, #68]	; (80017fc <HAL_GPIO_Init+0x324>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3301      	adds	r3, #1
 80017be:	61fb      	str	r3, [r7, #28]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	2b0f      	cmp	r3, #15
 80017c4:	f67f ae96 	bls.w	80014f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	3724      	adds	r7, #36	; 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40013800 	.word	0x40013800
 80017e0:	40020000 	.word	0x40020000
 80017e4:	40020400 	.word	0x40020400
 80017e8:	40020800 	.word	0x40020800
 80017ec:	40020c00 	.word	0x40020c00
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40021400 	.word	0x40021400
 80017f8:	40021800 	.word	0x40021800
 80017fc:	40013c00 	.word	0x40013c00

08001800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e0cc      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001814:	4b68      	ldr	r3, [pc, #416]	; (80019b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 030f 	and.w	r3, r3, #15
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d90c      	bls.n	800183c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001822:	4b65      	ldr	r3, [pc, #404]	; (80019b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b63      	ldr	r3, [pc, #396]	; (80019b8 <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0b8      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d020      	beq.n	800188a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001854:	4b59      	ldr	r3, [pc, #356]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	4a58      	ldr	r2, [pc, #352]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800185e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800186c:	4b53      	ldr	r3, [pc, #332]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	4a52      	ldr	r2, [pc, #328]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001876:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001878:	4b50      	ldr	r3, [pc, #320]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	494d      	ldr	r1, [pc, #308]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	4313      	orrs	r3, r2
 8001888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d044      	beq.n	8001920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	4b47      	ldr	r3, [pc, #284]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d119      	bne.n	80018de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e07f      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d003      	beq.n	80018be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d107      	bne.n	80018ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018be:	4b3f      	ldr	r3, [pc, #252]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d109      	bne.n	80018de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e06f      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ce:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e067      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018de:	4b37      	ldr	r3, [pc, #220]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f023 0203 	bic.w	r2, r3, #3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	4934      	ldr	r1, [pc, #208]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018f0:	f7ff f87c 	bl	80009ec <HAL_GetTick>
 80018f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f6:	e00a      	b.n	800190e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f8:	f7ff f878 	bl	80009ec <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	f241 3288 	movw	r2, #5000	; 0x1388
 8001906:	4293      	cmp	r3, r2
 8001908:	d901      	bls.n	800190e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e04f      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190e:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 020c 	and.w	r2, r3, #12
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	429a      	cmp	r2, r3
 800191e:	d1eb      	bne.n	80018f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001920:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 030f 	and.w	r3, r3, #15
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d20c      	bcs.n	8001948 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192e:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e032      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d008      	beq.n	8001966 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	4916      	ldr	r1, [pc, #88]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	4313      	orrs	r3, r2
 8001964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d009      	beq.n	8001986 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001972:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	490e      	ldr	r1, [pc, #56]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	4313      	orrs	r3, r2
 8001984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001986:	f000 f82d 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
 800198a:	4602      	mov	r2, r0
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	490a      	ldr	r1, [pc, #40]	; (80019c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001998:	5ccb      	ldrb	r3, [r1, r3]
 800199a:	fa22 f303 	lsr.w	r3, r2, r3
 800199e:	4a09      	ldr	r2, [pc, #36]	; (80019c4 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_RCC_ClockConfig+0x1c8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe ffdc 	bl	8000964 <HAL_InitTick>

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023c00 	.word	0x40023c00
 80019bc:	40023800 	.word	0x40023800
 80019c0:	080023e8 	.word	0x080023e8
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000004 	.word	0x20000004

080019cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000000 	.word	0x20000000

080019e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019e8:	b0ae      	sub	sp, #184	; 0xb8
 80019ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a0a:	4bcb      	ldr	r3, [pc, #812]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 030c 	and.w	r3, r3, #12
 8001a12:	2b0c      	cmp	r3, #12
 8001a14:	f200 8206 	bhi.w	8001e24 <HAL_RCC_GetSysClockFreq+0x440>
 8001a18:	a201      	add	r2, pc, #4	; (adr r2, 8001a20 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1e:	bf00      	nop
 8001a20:	08001a55 	.word	0x08001a55
 8001a24:	08001e25 	.word	0x08001e25
 8001a28:	08001e25 	.word	0x08001e25
 8001a2c:	08001e25 	.word	0x08001e25
 8001a30:	08001a5d 	.word	0x08001a5d
 8001a34:	08001e25 	.word	0x08001e25
 8001a38:	08001e25 	.word	0x08001e25
 8001a3c:	08001e25 	.word	0x08001e25
 8001a40:	08001a65 	.word	0x08001a65
 8001a44:	08001e25 	.word	0x08001e25
 8001a48:	08001e25 	.word	0x08001e25
 8001a4c:	08001e25 	.word	0x08001e25
 8001a50:	08001c55 	.word	0x08001c55
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a54:	4bb9      	ldr	r3, [pc, #740]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001a56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001a5a:	e1e7      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a5c:	4bb8      	ldr	r3, [pc, #736]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001a5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a62:	e1e3      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a64:	4bb4      	ldr	r3, [pc, #720]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a70:	4bb1      	ldr	r3, [pc, #708]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d071      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a7c:	4bae      	ldr	r3, [pc, #696]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	099b      	lsrs	r3, r3, #6
 8001a82:	2200      	movs	r2, #0
 8001a84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a88:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001a8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001aa2:	4622      	mov	r2, r4
 8001aa4:	462b      	mov	r3, r5
 8001aa6:	f04f 0000 	mov.w	r0, #0
 8001aaa:	f04f 0100 	mov.w	r1, #0
 8001aae:	0159      	lsls	r1, r3, #5
 8001ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ab4:	0150      	lsls	r0, r2, #5
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4621      	mov	r1, r4
 8001abc:	1a51      	subs	r1, r2, r1
 8001abe:	6439      	str	r1, [r7, #64]	; 0x40
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001ad4:	4649      	mov	r1, r9
 8001ad6:	018b      	lsls	r3, r1, #6
 8001ad8:	4641      	mov	r1, r8
 8001ada:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ade:	4641      	mov	r1, r8
 8001ae0:	018a      	lsls	r2, r1, #6
 8001ae2:	4641      	mov	r1, r8
 8001ae4:	1a51      	subs	r1, r2, r1
 8001ae6:	63b9      	str	r1, [r7, #56]	; 0x38
 8001ae8:	4649      	mov	r1, r9
 8001aea:	eb63 0301 	sbc.w	r3, r3, r1
 8001aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001afc:	4649      	mov	r1, r9
 8001afe:	00cb      	lsls	r3, r1, #3
 8001b00:	4641      	mov	r1, r8
 8001b02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001b06:	4641      	mov	r1, r8
 8001b08:	00ca      	lsls	r2, r1, #3
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4622      	mov	r2, r4
 8001b12:	189b      	adds	r3, r3, r2
 8001b14:	633b      	str	r3, [r7, #48]	; 0x30
 8001b16:	462b      	mov	r3, r5
 8001b18:	460a      	mov	r2, r1
 8001b1a:	eb42 0303 	adc.w	r3, r2, r3
 8001b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	f04f 0300 	mov.w	r3, #0
 8001b28:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	024b      	lsls	r3, r1, #9
 8001b30:	4621      	mov	r1, r4
 8001b32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b36:	4621      	mov	r1, r4
 8001b38:	024a      	lsls	r2, r1, #9
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b42:	2200      	movs	r2, #0
 8001b44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001b48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001b4c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001b50:	f7fe fb58 	bl	8000204 <__aeabi_uldivmod>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4613      	mov	r3, r2
 8001b5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b5e:	e067      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b60:	4b75      	ldr	r3, [pc, #468]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	099b      	lsrs	r3, r3, #6
 8001b66:	2200      	movs	r2, #0
 8001b68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b6c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001b70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b78:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b7e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001b82:	4622      	mov	r2, r4
 8001b84:	462b      	mov	r3, r5
 8001b86:	f04f 0000 	mov.w	r0, #0
 8001b8a:	f04f 0100 	mov.w	r1, #0
 8001b8e:	0159      	lsls	r1, r3, #5
 8001b90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b94:	0150      	lsls	r0, r2, #5
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	1a51      	subs	r1, r2, r1
 8001b9e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001ba0:	4629      	mov	r1, r5
 8001ba2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	f04f 0300 	mov.w	r3, #0
 8001bb0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001bb4:	4649      	mov	r1, r9
 8001bb6:	018b      	lsls	r3, r1, #6
 8001bb8:	4641      	mov	r1, r8
 8001bba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bbe:	4641      	mov	r1, r8
 8001bc0:	018a      	lsls	r2, r1, #6
 8001bc2:	4641      	mov	r1, r8
 8001bc4:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bc8:	4649      	mov	r1, r9
 8001bca:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001bda:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001bde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001be2:	4692      	mov	sl, r2
 8001be4:	469b      	mov	fp, r3
 8001be6:	4623      	mov	r3, r4
 8001be8:	eb1a 0303 	adds.w	r3, sl, r3
 8001bec:	623b      	str	r3, [r7, #32]
 8001bee:	462b      	mov	r3, r5
 8001bf0:	eb4b 0303 	adc.w	r3, fp, r3
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001c02:	4629      	mov	r1, r5
 8001c04:	028b      	lsls	r3, r1, #10
 8001c06:	4621      	mov	r1, r4
 8001c08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c0c:	4621      	mov	r1, r4
 8001c0e:	028a      	lsls	r2, r1, #10
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c18:	2200      	movs	r2, #0
 8001c1a:	673b      	str	r3, [r7, #112]	; 0x70
 8001c1c:	677a      	str	r2, [r7, #116]	; 0x74
 8001c1e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001c22:	f7fe faef 	bl	8000204 <__aeabi_uldivmod>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c30:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	0c1b      	lsrs	r3, r3, #16
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001c42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001c46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c52:	e0eb      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c54:	4b38      	ldr	r3, [pc, #224]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c60:	4b35      	ldr	r3, [pc, #212]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d06b      	beq.n	8001d44 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c6c:	4b32      	ldr	r3, [pc, #200]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	099b      	lsrs	r3, r3, #6
 8001c72:	2200      	movs	r2, #0
 8001c74:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001c78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c7e:	663b      	str	r3, [r7, #96]	; 0x60
 8001c80:	2300      	movs	r3, #0
 8001c82:	667b      	str	r3, [r7, #100]	; 0x64
 8001c84:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001c88:	4622      	mov	r2, r4
 8001c8a:	462b      	mov	r3, r5
 8001c8c:	f04f 0000 	mov.w	r0, #0
 8001c90:	f04f 0100 	mov.w	r1, #0
 8001c94:	0159      	lsls	r1, r3, #5
 8001c96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c9a:	0150      	lsls	r0, r2, #5
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4621      	mov	r1, r4
 8001ca2:	1a51      	subs	r1, r2, r1
 8001ca4:	61b9      	str	r1, [r7, #24]
 8001ca6:	4629      	mov	r1, r5
 8001ca8:	eb63 0301 	sbc.w	r3, r3, r1
 8001cac:	61fb      	str	r3, [r7, #28]
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001cba:	4659      	mov	r1, fp
 8001cbc:	018b      	lsls	r3, r1, #6
 8001cbe:	4651      	mov	r1, sl
 8001cc0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cc4:	4651      	mov	r1, sl
 8001cc6:	018a      	lsls	r2, r1, #6
 8001cc8:	4651      	mov	r1, sl
 8001cca:	ebb2 0801 	subs.w	r8, r2, r1
 8001cce:	4659      	mov	r1, fp
 8001cd0:	eb63 0901 	sbc.w	r9, r3, r1
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ce0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ce4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ce8:	4690      	mov	r8, r2
 8001cea:	4699      	mov	r9, r3
 8001cec:	4623      	mov	r3, r4
 8001cee:	eb18 0303 	adds.w	r3, r8, r3
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	462b      	mov	r3, r5
 8001cf6:	eb49 0303 	adc.w	r3, r9, r3
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001d08:	4629      	mov	r1, r5
 8001d0a:	024b      	lsls	r3, r1, #9
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d12:	4621      	mov	r1, r4
 8001d14:	024a      	lsls	r2, r1, #9
 8001d16:	4610      	mov	r0, r2
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d1e:	2200      	movs	r2, #0
 8001d20:	65bb      	str	r3, [r7, #88]	; 0x58
 8001d22:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001d24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d28:	f7fe fa6c 	bl	8000204 <__aeabi_uldivmod>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4613      	mov	r3, r2
 8001d32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d36:	e065      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x420>
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	00f42400 	.word	0x00f42400
 8001d40:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d44:	4b3d      	ldr	r3, [pc, #244]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x458>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	099b      	lsrs	r3, r3, #6
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	4611      	mov	r1, r2
 8001d50:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d54:	653b      	str	r3, [r7, #80]	; 0x50
 8001d56:	2300      	movs	r3, #0
 8001d58:	657b      	str	r3, [r7, #84]	; 0x54
 8001d5a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001d5e:	4642      	mov	r2, r8
 8001d60:	464b      	mov	r3, r9
 8001d62:	f04f 0000 	mov.w	r0, #0
 8001d66:	f04f 0100 	mov.w	r1, #0
 8001d6a:	0159      	lsls	r1, r3, #5
 8001d6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d70:	0150      	lsls	r0, r2, #5
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4641      	mov	r1, r8
 8001d78:	1a51      	subs	r1, r2, r1
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	4649      	mov	r1, r9
 8001d7e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001d90:	4659      	mov	r1, fp
 8001d92:	018b      	lsls	r3, r1, #6
 8001d94:	4651      	mov	r1, sl
 8001d96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d9a:	4651      	mov	r1, sl
 8001d9c:	018a      	lsls	r2, r1, #6
 8001d9e:	4651      	mov	r1, sl
 8001da0:	1a54      	subs	r4, r2, r1
 8001da2:	4659      	mov	r1, fp
 8001da4:	eb63 0501 	sbc.w	r5, r3, r1
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	00eb      	lsls	r3, r5, #3
 8001db2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001db6:	00e2      	lsls	r2, r4, #3
 8001db8:	4614      	mov	r4, r2
 8001dba:	461d      	mov	r5, r3
 8001dbc:	4643      	mov	r3, r8
 8001dbe:	18e3      	adds	r3, r4, r3
 8001dc0:	603b      	str	r3, [r7, #0]
 8001dc2:	464b      	mov	r3, r9
 8001dc4:	eb45 0303 	adc.w	r3, r5, r3
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dd6:	4629      	mov	r1, r5
 8001dd8:	028b      	lsls	r3, r1, #10
 8001dda:	4621      	mov	r1, r4
 8001ddc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001de0:	4621      	mov	r1, r4
 8001de2:	028a      	lsls	r2, r1, #10
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dec:	2200      	movs	r2, #0
 8001dee:	64bb      	str	r3, [r7, #72]	; 0x48
 8001df0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001df2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001df6:	f7fe fa05 	bl	8000204 <__aeabi_uldivmod>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4613      	mov	r3, r2
 8001e00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e04:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x458>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	0f1b      	lsrs	r3, r3, #28
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001e12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001e16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e22:	e003      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001e26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	37b8      	adds	r7, #184	; 0xb8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	00f42400 	.word	0x00f42400

08001e44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e28d      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 8083 	beq.w	8001f6a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e64:	4b94      	ldr	r3, [pc, #592]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 030c 	and.w	r3, r3, #12
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d019      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e70:	4b91      	ldr	r3, [pc, #580]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d106      	bne.n	8001e8a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e7c:	4b8e      	ldr	r3, [pc, #568]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e88:	d00c      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e8a:	4b8b      	ldr	r3, [pc, #556]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e92:	2b0c      	cmp	r3, #12
 8001e94:	d112      	bne.n	8001ebc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e96:	4b88      	ldr	r3, [pc, #544]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ea2:	d10b      	bne.n	8001ebc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea4:	4b84      	ldr	r3, [pc, #528]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d05b      	beq.n	8001f68 <HAL_RCC_OscConfig+0x124>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d157      	bne.n	8001f68 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e25a      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec4:	d106      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x90>
 8001ec6:	4b7c      	ldr	r3, [pc, #496]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a7b      	ldr	r2, [pc, #492]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	e01d      	b.n	8001f10 <HAL_RCC_OscConfig+0xcc>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001edc:	d10c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0xb4>
 8001ede:	4b76      	ldr	r3, [pc, #472]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a75      	ldr	r2, [pc, #468]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	4b73      	ldr	r3, [pc, #460]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a72      	ldr	r2, [pc, #456]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	e00b      	b.n	8001f10 <HAL_RCC_OscConfig+0xcc>
 8001ef8:	4b6f      	ldr	r3, [pc, #444]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a6e      	ldr	r2, [pc, #440]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	4b6c      	ldr	r3, [pc, #432]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a6b      	ldr	r2, [pc, #428]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d013      	beq.n	8001f40 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7fe fd68 	bl	80009ec <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f20:	f7fe fd64 	bl	80009ec <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	; 0x64
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e21f      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	4b61      	ldr	r3, [pc, #388]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0xdc>
 8001f3e:	e014      	b.n	8001f6a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7fe fd54 	bl	80009ec <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f48:	f7fe fd50 	bl	80009ec <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b64      	cmp	r3, #100	; 0x64
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e20b      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5a:	4b57      	ldr	r3, [pc, #348]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x104>
 8001f66:	e000      	b.n	8001f6a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d06f      	beq.n	8002056 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f76:	4b50      	ldr	r3, [pc, #320]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d017      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f82:	4b4d      	ldr	r3, [pc, #308]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d105      	bne.n	8001f9a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f8e:	4b4a      	ldr	r3, [pc, #296]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00b      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f9a:	4b47      	ldr	r3, [pc, #284]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fa2:	2b0c      	cmp	r3, #12
 8001fa4:	d11c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa6:	4b44      	ldr	r3, [pc, #272]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d116      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb2:	4b41      	ldr	r3, [pc, #260]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d005      	beq.n	8001fca <HAL_RCC_OscConfig+0x186>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e1d3      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fca:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4937      	ldr	r1, [pc, #220]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fde:	e03a      	b.n	8002056 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d020      	beq.n	800202a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe8:	4b34      	ldr	r3, [pc, #208]	; (80020bc <HAL_RCC_OscConfig+0x278>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fee:	f7fe fcfd 	bl	80009ec <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff6:	f7fe fcf9 	bl	80009ec <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e1b4      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002008:	4b2b      	ldr	r3, [pc, #172]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002014:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4925      	ldr	r1, [pc, #148]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
 8002028:	e015      	b.n	8002056 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202a:	4b24      	ldr	r3, [pc, #144]	; (80020bc <HAL_RCC_OscConfig+0x278>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002030:	f7fe fcdc 	bl	80009ec <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002038:	f7fe fcd8 	bl	80009ec <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e193      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204a:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d036      	beq.n	80020d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d016      	beq.n	8002098 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <HAL_RCC_OscConfig+0x27c>)
 800206c:	2201      	movs	r2, #1
 800206e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002070:	f7fe fcbc 	bl	80009ec <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002078:	f7fe fcb8 	bl	80009ec <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e173      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 800208c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0x234>
 8002096:	e01b      	b.n	80020d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002098:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <HAL_RCC_OscConfig+0x27c>)
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209e:	f7fe fca5 	bl	80009ec <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a4:	e00e      	b.n	80020c4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a6:	f7fe fca1 	bl	80009ec <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d907      	bls.n	80020c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e15c      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
 80020b8:	40023800 	.word	0x40023800
 80020bc:	42470000 	.word	0x42470000
 80020c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c4:	4b8a      	ldr	r3, [pc, #552]	; (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 80020c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1ea      	bne.n	80020a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 8097 	beq.w	800220c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e2:	4b83      	ldr	r3, [pc, #524]	; (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10f      	bne.n	800210e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	4b7f      	ldr	r3, [pc, #508]	; (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	4a7e      	ldr	r2, [pc, #504]	; (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 80020f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fc:	6413      	str	r3, [r2, #64]	; 0x40
 80020fe:	4b7c      	ldr	r3, [pc, #496]	; (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800210a:	2301      	movs	r3, #1
 800210c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210e:	4b79      	ldr	r3, [pc, #484]	; (80022f4 <HAL_RCC_OscConfig+0x4b0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d118      	bne.n	800214c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800211a:	4b76      	ldr	r3, [pc, #472]	; (80022f4 <HAL_RCC_OscConfig+0x4b0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a75      	ldr	r2, [pc, #468]	; (80022f4 <HAL_RCC_OscConfig+0x4b0>)
 8002120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002126:	f7fe fc61 	bl	80009ec <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212e:	f7fe fc5d 	bl	80009ec <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e118      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	4b6c      	ldr	r3, [pc, #432]	; (80022f4 <HAL_RCC_OscConfig+0x4b0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x31e>
 8002154:	4b66      	ldr	r3, [pc, #408]	; (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 8002156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002158:	4a65      	ldr	r2, [pc, #404]	; (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6713      	str	r3, [r2, #112]	; 0x70
 8002160:	e01c      	b.n	800219c <HAL_RCC_OscConfig+0x358>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b05      	cmp	r3, #5
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x340>
 800216a:	4b61      	ldr	r3, [pc, #388]	; (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 800216c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216e:	4a60      	ldr	r2, [pc, #384]	; (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	6713      	str	r3, [r2, #112]	; 0x70
 8002176:	4b5e      	ldr	r3, [pc, #376]	; (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 8002178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217a:	4a5d      	ldr	r2, [pc, #372]	; (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6713      	str	r3, [r2, #112]	; 0x70
 8002182:	e00b      	b.n	800219c <HAL_RCC_OscConfig+0x358>
 8002184:	4b5a      	ldr	r3, [pc, #360]	; (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 8002186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002188:	4a59      	ldr	r2, [pc, #356]	; (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 800218a:	f023 0301 	bic.w	r3, r3, #1
 800218e:	6713      	str	r3, [r2, #112]	; 0x70
 8002190:	4b57      	ldr	r3, [pc, #348]	; (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 8002192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002194:	4a56      	ldr	r2, [pc, #344]	; (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 8002196:	f023 0304 	bic.w	r3, r3, #4
 800219a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d015      	beq.n	80021d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a4:	f7fe fc22 	bl	80009ec <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ac:	f7fe fc1e 	bl	80009ec <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e0d7      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c2:	4b4b      	ldr	r3, [pc, #300]	; (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0ee      	beq.n	80021ac <HAL_RCC_OscConfig+0x368>
 80021ce:	e014      	b.n	80021fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d0:	f7fe fc0c 	bl	80009ec <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d6:	e00a      	b.n	80021ee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d8:	f7fe fc08 	bl	80009ec <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e0c1      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ee:	4b40      	ldr	r3, [pc, #256]	; (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1ee      	bne.n	80021d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021fa:	7dfb      	ldrb	r3, [r7, #23]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d105      	bne.n	800220c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002200:	4b3b      	ldr	r3, [pc, #236]	; (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	4a3a      	ldr	r2, [pc, #232]	; (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 8002206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800220a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80ad 	beq.w	8002370 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002216:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b08      	cmp	r3, #8
 8002220:	d060      	beq.n	80022e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d145      	bne.n	80022b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222a:	4b33      	ldr	r3, [pc, #204]	; (80022f8 <HAL_RCC_OscConfig+0x4b4>)
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe fbdc 	bl	80009ec <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002238:	f7fe fbd8 	bl	80009ec <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e093      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224a:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69da      	ldr	r2, [r3, #28]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	019b      	lsls	r3, r3, #6
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226c:	085b      	lsrs	r3, r3, #1
 800226e:	3b01      	subs	r3, #1
 8002270:	041b      	lsls	r3, r3, #16
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	061b      	lsls	r3, r3, #24
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002280:	071b      	lsls	r3, r3, #28
 8002282:	491b      	ldr	r1, [pc, #108]	; (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_RCC_OscConfig+0x4b4>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228e:	f7fe fbad 	bl	80009ec <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002296:	f7fe fba9 	bl	80009ec <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e064      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x452>
 80022b4:	e05c      	b.n	8002370 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <HAL_RCC_OscConfig+0x4b4>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7fe fb96 	bl	80009ec <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c4:	f7fe fb92 	bl	80009ec <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e04d      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x480>
 80022e2:	e045      	b.n	8002370 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d107      	bne.n	80022fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e040      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40007000 	.word	0x40007000
 80022f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022fc:	4b1f      	ldr	r3, [pc, #124]	; (800237c <HAL_RCC_OscConfig+0x538>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d030      	beq.n	800236c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002314:	429a      	cmp	r2, r3
 8002316:	d129      	bne.n	800236c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d122      	bne.n	800236c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800232c:	4013      	ands	r3, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002332:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002334:	4293      	cmp	r3, r2
 8002336:	d119      	bne.n	800236c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	085b      	lsrs	r3, r3, #1
 8002344:	3b01      	subs	r3, #1
 8002346:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d10f      	bne.n	800236c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002358:	429a      	cmp	r2, r3
 800235a:	d107      	bne.n	800236c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800

08002380 <__libc_init_array>:
 8002380:	b570      	push	{r4, r5, r6, lr}
 8002382:	4d0d      	ldr	r5, [pc, #52]	; (80023b8 <__libc_init_array+0x38>)
 8002384:	4c0d      	ldr	r4, [pc, #52]	; (80023bc <__libc_init_array+0x3c>)
 8002386:	1b64      	subs	r4, r4, r5
 8002388:	10a4      	asrs	r4, r4, #2
 800238a:	2600      	movs	r6, #0
 800238c:	42a6      	cmp	r6, r4
 800238e:	d109      	bne.n	80023a4 <__libc_init_array+0x24>
 8002390:	4d0b      	ldr	r5, [pc, #44]	; (80023c0 <__libc_init_array+0x40>)
 8002392:	4c0c      	ldr	r4, [pc, #48]	; (80023c4 <__libc_init_array+0x44>)
 8002394:	f000 f818 	bl	80023c8 <_init>
 8002398:	1b64      	subs	r4, r4, r5
 800239a:	10a4      	asrs	r4, r4, #2
 800239c:	2600      	movs	r6, #0
 800239e:	42a6      	cmp	r6, r4
 80023a0:	d105      	bne.n	80023ae <__libc_init_array+0x2e>
 80023a2:	bd70      	pop	{r4, r5, r6, pc}
 80023a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80023a8:	4798      	blx	r3
 80023aa:	3601      	adds	r6, #1
 80023ac:	e7ee      	b.n	800238c <__libc_init_array+0xc>
 80023ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80023b2:	4798      	blx	r3
 80023b4:	3601      	adds	r6, #1
 80023b6:	e7f2      	b.n	800239e <__libc_init_array+0x1e>
 80023b8:	08002400 	.word	0x08002400
 80023bc:	08002400 	.word	0x08002400
 80023c0:	08002400 	.word	0x08002400
 80023c4:	08002404 	.word	0x08002404

080023c8 <_init>:
 80023c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ca:	bf00      	nop
 80023cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ce:	bc08      	pop	{r3}
 80023d0:	469e      	mov	lr, r3
 80023d2:	4770      	bx	lr

080023d4 <_fini>:
 80023d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d6:	bf00      	nop
 80023d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023da:	bc08      	pop	{r3}
 80023dc:	469e      	mov	lr, r3
 80023de:	4770      	bx	lr
