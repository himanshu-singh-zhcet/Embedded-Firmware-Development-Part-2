
01_UART2_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000159c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001730  08001730  00011730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001758  08001758  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08001758  08001758  00011758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001760  08001760  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001760  08001760  00011760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001764  08001764  00011764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000010  08001778  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08001778  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000736e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000124f  00000000  00000000  000273ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c0  00000000  00000000  00028600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000558  00000000  00000000  00028bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014dcd  00000000  00000000  00029118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006e6c  00000000  00000000  0003dee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000838d2  00000000  00000000  00044d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c8623  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001684  00000000  00000000  000c8674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001718 	.word	0x08001718

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08001718 	.word	0x08001718

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <SysTick_Handler>:
 *
 *  Created on: Jul 21, 2024
 *      Author: Himanshu Singh
 */

void SysTick_Handler(void){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004ec:	f000 f996 	bl	800081c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004f0:	f000 fac5 	bl	8000a7e <HAL_SYSTICK_IRQHandler>
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <main>:
void Error_Handler(void);
uint8_t convert_to_capital(uint8_t data);

UART_HandleTypeDef huart2;
char *user_data = "The Application is running \r\n";
int main(void){
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b09d      	sub	sp, #116	; 0x74
 80004fc:	af00      	add	r7, sp, #0
	HAL_Init();
 80004fe:	f000 f93b 	bl	8000778 <HAL_Init>
	SystemClockConfig();
 8000502:	f000 f847 	bl	8000594 <SystemClockConfig>
	UART2_Init();
 8000506:	f000 f84d 	bl	80005a4 <UART2_Init>

	uint16_t len_of_data = strlen(user_data);
 800050a:	4b20      	ldr	r3, [pc, #128]	; (800058c <main+0x94>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff fe60 	bl	80001d4 <strlen>
 8000514:	4603      	mov	r3, r0
 8000516:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	HAL_UART_Transmit(&huart2,(uint8_t*)user_data,len_of_data,HAL_MAX_DELAY);
 800051a:	4b1c      	ldr	r3, [pc, #112]	; (800058c <main+0x94>)
 800051c:	6819      	ldr	r1, [r3, #0]
 800051e:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8000522:	f04f 33ff 	mov.w	r3, #4294967295
 8000526:	481a      	ldr	r0, [pc, #104]	; (8000590 <main+0x98>)
 8000528:	f000 fcbb 	bl	8000ea2 <HAL_UART_Transmit>

    uint8_t rcvd_data;
    uint8_t data_buffer[100];
    int count = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	66fb      	str	r3, [r7, #108]	; 0x6c
    while(1){
    HAL_UART_Receive(&huart2,&rcvd_data,1,HAL_MAX_DELAY);
 8000530:	f107 0169 	add.w	r1, r7, #105	; 0x69
 8000534:	f04f 33ff 	mov.w	r3, #4294967295
 8000538:	2201      	movs	r2, #1
 800053a:	4815      	ldr	r0, [pc, #84]	; (8000590 <main+0x98>)
 800053c:	f000 fd43 	bl	8000fc6 <HAL_UART_Receive>
        if(rcvd_data == '\r'){
 8000540:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8000544:	2b0d      	cmp	r3, #13
 8000546:	d00f      	beq.n	8000568 <main+0x70>
    	   break;
        }
        else{
           data_buffer[count++] = convert_to_capital(rcvd_data);
 8000548:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 800054c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800054e:	1c63      	adds	r3, r4, #1
 8000550:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000552:	4610      	mov	r0, r2
 8000554:	f000 f850 	bl	80005f8 <convert_to_capital>
 8000558:	4603      	mov	r3, r0
 800055a:	461a      	mov	r2, r3
 800055c:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8000560:	443b      	add	r3, r7
 8000562:	f803 2c6c 	strb.w	r2, [r3, #-108]
    HAL_UART_Receive(&huart2,&rcvd_data,1,HAL_MAX_DELAY);
 8000566:	e7e3      	b.n	8000530 <main+0x38>
    	   break;
 8000568:	bf00      	nop
        }
    }
    data_buffer[count++] = '\r';  // putting carage return
 800056a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800056c:	1c5a      	adds	r2, r3, #1
 800056e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000570:	3370      	adds	r3, #112	; 0x70
 8000572:	443b      	add	r3, r7
 8000574:	220d      	movs	r2, #13
 8000576:	f803 2c6c 	strb.w	r2, [r3, #-108]
    HAL_UART_Transmit(&huart2,data_buffer,count,HAL_MAX_DELAY);
 800057a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800057c:	b29a      	uxth	r2, r3
 800057e:	1d39      	adds	r1, r7, #4
 8000580:	f04f 33ff 	mov.w	r3, #4294967295
 8000584:	4802      	ldr	r0, [pc, #8]	; (8000590 <main+0x98>)
 8000586:	f000 fc8c 	bl	8000ea2 <HAL_UART_Transmit>
	while(1);
 800058a:	e7fe      	b.n	800058a <main+0x92>
 800058c:	20000000 	.word	0x20000000
 8000590:	2000002c 	.word	0x2000002c

08000594 <SystemClockConfig>:

	return 0;
}

void SystemClockConfig(void){
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <UART2_Init>:

// High Level Initialization
void UART2_Init(){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
    huart2.Instance  =  USART2;
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <UART2_Init+0x4c>)
 80005aa:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <UART2_Init+0x50>)
 80005ac:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <UART2_Init+0x4c>)
 80005b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b4:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <UART2_Init+0x4c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <UART2_Init+0x4c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <UART2_Init+0x4c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <UART2_Init+0x4c>)
 80005ca:	220c      	movs	r2, #12
 80005cc:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <UART2_Init+0x4c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <UART2_Init+0x4c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK){
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <UART2_Init+0x4c>)
 80005dc:	f000 fc14 	bl	8000e08 <HAL_UART_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <UART2_Init+0x46>
    	// There is a Problem
        Error_Handler();
 80005e6:	f000 f81c 	bl	8000622 <Error_Handler>
      }
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	2000002c 	.word	0x2000002c
 80005f4:	40004400 	.word	0x40004400

080005f8 <convert_to_capital>:

uint8_t convert_to_capital(uint8_t data){
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	if(data>= 'a' && data <= 'z'){
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2b60      	cmp	r3, #96	; 0x60
 8000606:	d905      	bls.n	8000614 <convert_to_capital+0x1c>
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	2b7a      	cmp	r3, #122	; 0x7a
 800060c:	d802      	bhi.n	8000614 <convert_to_capital+0x1c>
		data = data - ('a' - 'A');
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	3b20      	subs	r3, #32
 8000612:	71fb      	strb	r3, [r7, #7]
	}
	return data;
 8000614:	79fb      	ldrb	r3, [r7, #7]
}
 8000616:	4618      	mov	r0, r3
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <Error_Handler>:

void Error_Handler(void){
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000626:	b672      	cpsid	i
}
 8000628:	bf00      	nop
  __disable_irq();
  while (1){
 800062a:	e7fe      	b.n	800062a <Error_Handler+0x8>

0800062c <HAL_MspInit>:

#include "stm32f4xx_hal.h"


// Low level Initialization
void HAL_MspInit(void){
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	 //Here will do low level processor specific inits.

	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000630:	2003      	movs	r0, #3
 8000632:	f000 f9e3 	bl	80009fc <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000636:	4b0d      	ldr	r3, [pc, #52]	; (800066c <HAL_MspInit+0x40>)
 8000638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800063a:	4a0c      	ldr	r2, [pc, #48]	; (800066c <HAL_MspInit+0x40>)
 800063c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000640:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	f06f 000b 	mvn.w	r0, #11
 800064a:	f000 f9e2 	bl	8000a12 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	f06f 000a 	mvn.w	r0, #10
 8000656:	f000 f9dc 	bl	8000a12 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 800065a:	2200      	movs	r2, #0
 800065c:	2100      	movs	r1, #0
 800065e:	f06f 0009 	mvn.w	r0, #9
 8000662:	f000 f9d6 	bl	8000a12 <HAL_NVIC_SetPriority>
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <HAL_UART_MspInit>:
  * @brief  UART MSP Init.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_uart;
  //here we are going to do the low level inits. of the USART2 peripheral

  //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
  __HAL_RCC_USART2_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <HAL_UART_MspInit+0x88>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a1d      	ldr	r2, [pc, #116]	; (80006f8 <HAL_UART_MspInit+0x88>)
 8000682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <HAL_UART_MspInit+0x88>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <HAL_UART_MspInit+0x88>)
 800069a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069c:	4a16      	ldr	r2, [pc, #88]	; (80006f8 <HAL_UART_MspInit+0x88>)
 800069e:	f043 0301 	orr.w	r3, r3, #1
 80006a2:	6313      	str	r3, [r2, #48]	; 0x30
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <HAL_UART_MspInit+0x88>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	68fb      	ldr	r3, [r7, #12]

  //2 . Do the pin muxing configurations
  gpio_uart.Pin = GPIO_PIN_2;
 80006b0:	2304      	movs	r3, #4
 80006b2:	617b      	str	r3, [r7, #20]
  gpio_uart.Mode =GPIO_MODE_AF_PP;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61bb      	str	r3, [r7, #24]
  gpio_uart.Pull = GPIO_PULLUP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	61fb      	str	r3, [r7, #28]
  gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
  gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 80006c0:	2307      	movs	r3, #7
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA,&gpio_uart);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	480c      	ldr	r0, [pc, #48]	; (80006fc <HAL_UART_MspInit+0x8c>)
 80006cc:	f000 f9e4 	bl	8000a98 <HAL_GPIO_Init>

  gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 80006d0:	2308      	movs	r3, #8
 80006d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA,&gpio_uart);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4619      	mov	r1, r3
 80006da:	4808      	ldr	r0, [pc, #32]	; (80006fc <HAL_UART_MspInit+0x8c>)
 80006dc:	f000 f9dc 	bl	8000a98 <HAL_GPIO_Init>
  //3 . Enable the IRQ and set up the priority (NVIC settings )
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006e0:	2026      	movs	r0, #38	; 0x26
 80006e2:	f000 f9b2 	bl	8000a4a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	210f      	movs	r1, #15
 80006ea:	2026      	movs	r0, #38	; 0x26
 80006ec:	f000 f991 	bl	8000a12 <HAL_NVIC_SetPriority>
}
 80006f0:	bf00      	nop
 80006f2:	3728      	adds	r7, #40	; 0x28
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40020000 	.word	0x40020000

08000700 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <SystemInit+0x20>)
 8000706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800070a:	4a05      	ldr	r2, [pc, #20]	; (8000720 <SystemInit+0x20>)
 800070c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000710:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800075c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000728:	480d      	ldr	r0, [pc, #52]	; (8000760 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800072a:	490e      	ldr	r1, [pc, #56]	; (8000764 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800072c:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000730:	e002      	b.n	8000738 <LoopCopyDataInit>

08000732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000736:	3304      	adds	r3, #4

08000738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800073c:	d3f9      	bcc.n	8000732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073e:	4a0b      	ldr	r2, [pc, #44]	; (800076c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000740:	4c0b      	ldr	r4, [pc, #44]	; (8000770 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000744:	e001      	b.n	800074a <LoopFillZerobss>

08000746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000748:	3204      	adds	r2, #4

0800074a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800074c:	d3fb      	bcc.n	8000746 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800074e:	f7ff ffd7 	bl	8000700 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000752:	f000 ffbd 	bl	80016d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000756:	f7ff fecf 	bl	80004f8 <main>
  bx  lr    
 800075a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800075c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000764:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000768:	08001768 	.word	0x08001768
  ldr r2, =_sbss
 800076c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000770:	20000074 	.word	0x20000074

08000774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000774:	e7fe      	b.n	8000774 <ADC_IRQHandler>
	...

08000778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_Init+0x40>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <HAL_Init+0x40>)
 8000782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000786:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000788:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <HAL_Init+0x40>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <HAL_Init+0x40>)
 800078e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000792:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_Init+0x40>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <HAL_Init+0x40>)
 800079a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800079e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a0:	2003      	movs	r0, #3
 80007a2:	f000 f92b 	bl	80009fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f000 f808 	bl	80007bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007ac:	f7ff ff3e 	bl	800062c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023c00 	.word	0x40023c00

080007bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <HAL_InitTick+0x54>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <HAL_InitTick+0x58>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	4619      	mov	r1, r3
 80007ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 f943 	bl	8000a66 <HAL_SYSTICK_Config>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
 80007e8:	e00e      	b.n	8000808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b0f      	cmp	r3, #15
 80007ee:	d80a      	bhi.n	8000806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f0:	2200      	movs	r2, #0
 80007f2:	6879      	ldr	r1, [r7, #4]
 80007f4:	f04f 30ff 	mov.w	r0, #4294967295
 80007f8:	f000 f90b 	bl	8000a12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007fc:	4a06      	ldr	r2, [pc, #24]	; (8000818 <HAL_InitTick+0x5c>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000802:	2300      	movs	r3, #0
 8000804:	e000      	b.n	8000808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000004 	.word	0x20000004
 8000814:	2000000c 	.word	0x2000000c
 8000818:	20000008 	.word	0x20000008

0800081c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_IncTick+0x20>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	461a      	mov	r2, r3
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_IncTick+0x24>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4413      	add	r3, r2
 800082c:	4a04      	ldr	r2, [pc, #16]	; (8000840 <HAL_IncTick+0x24>)
 800082e:	6013      	str	r3, [r2, #0]
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	2000000c 	.word	0x2000000c
 8000840:	20000070 	.word	0x20000070

08000844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return uwTick;
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <HAL_GetTick+0x14>)
 800084a:	681b      	ldr	r3, [r3, #0]
}
 800084c:	4618      	mov	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	20000070 	.word	0x20000070

0800085c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <__NVIC_SetPriorityGrouping+0x44>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000878:	4013      	ands	r3, r2
 800087a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800088c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800088e:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	60d3      	str	r3, [r2, #12]
}
 8000894:	bf00      	nop
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a8:	4b04      	ldr	r3, [pc, #16]	; (80008bc <__NVIC_GetPriorityGrouping+0x18>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	0a1b      	lsrs	r3, r3, #8
 80008ae:	f003 0307 	and.w	r3, r3, #7
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	db0b      	blt.n	80008ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	f003 021f 	and.w	r2, r3, #31
 80008d8:	4907      	ldr	r1, [pc, #28]	; (80008f8 <__NVIC_EnableIRQ+0x38>)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	095b      	lsrs	r3, r3, #5
 80008e0:	2001      	movs	r0, #1
 80008e2:	fa00 f202 	lsl.w	r2, r0, r2
 80008e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000e100 	.word	0xe000e100

080008fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	6039      	str	r1, [r7, #0]
 8000906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090c:	2b00      	cmp	r3, #0
 800090e:	db0a      	blt.n	8000926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	b2da      	uxtb	r2, r3
 8000914:	490c      	ldr	r1, [pc, #48]	; (8000948 <__NVIC_SetPriority+0x4c>)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	0112      	lsls	r2, r2, #4
 800091c:	b2d2      	uxtb	r2, r2
 800091e:	440b      	add	r3, r1
 8000920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000924:	e00a      	b.n	800093c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4908      	ldr	r1, [pc, #32]	; (800094c <__NVIC_SetPriority+0x50>)
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	f003 030f 	and.w	r3, r3, #15
 8000932:	3b04      	subs	r3, #4
 8000934:	0112      	lsls	r2, r2, #4
 8000936:	b2d2      	uxtb	r2, r2
 8000938:	440b      	add	r3, r1
 800093a:	761a      	strb	r2, [r3, #24]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	e000e100 	.word	0xe000e100
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000950:	b480      	push	{r7}
 8000952:	b089      	sub	sp, #36	; 0x24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	f1c3 0307 	rsb	r3, r3, #7
 800096a:	2b04      	cmp	r3, #4
 800096c:	bf28      	it	cs
 800096e:	2304      	movcs	r3, #4
 8000970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3304      	adds	r3, #4
 8000976:	2b06      	cmp	r3, #6
 8000978:	d902      	bls.n	8000980 <NVIC_EncodePriority+0x30>
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	3b03      	subs	r3, #3
 800097e:	e000      	b.n	8000982 <NVIC_EncodePriority+0x32>
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	f04f 32ff 	mov.w	r2, #4294967295
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	43da      	mvns	r2, r3
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	401a      	ands	r2, r3
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000998:	f04f 31ff 	mov.w	r1, #4294967295
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	fa01 f303 	lsl.w	r3, r1, r3
 80009a2:	43d9      	mvns	r1, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a8:	4313      	orrs	r3, r2
         );
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3724      	adds	r7, #36	; 0x24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
	...

080009b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009c8:	d301      	bcc.n	80009ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ca:	2301      	movs	r3, #1
 80009cc:	e00f      	b.n	80009ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <SysTick_Config+0x40>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009d6:	210f      	movs	r1, #15
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	f7ff ff8e 	bl	80008fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <SysTick_Config+0x40>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009e6:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <SysTick_Config+0x40>)
 80009e8:	2207      	movs	r2, #7
 80009ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	e000e010 	.word	0xe000e010

080009fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff ff29 	bl	800085c <__NVIC_SetPriorityGrouping>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b086      	sub	sp, #24
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	4603      	mov	r3, r0
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
 8000a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a24:	f7ff ff3e 	bl	80008a4 <__NVIC_GetPriorityGrouping>
 8000a28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	68b9      	ldr	r1, [r7, #8]
 8000a2e:	6978      	ldr	r0, [r7, #20]
 8000a30:	f7ff ff8e 	bl	8000950 <NVIC_EncodePriority>
 8000a34:	4602      	mov	r2, r0
 8000a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff5d 	bl	80008fc <__NVIC_SetPriority>
}
 8000a42:	bf00      	nop
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	4603      	mov	r3, r0
 8000a52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff ff31 	bl	80008c0 <__NVIC_EnableIRQ>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f7ff ffa2 	bl	80009b8 <SysTick_Config>
 8000a74:	4603      	mov	r3, r0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000a82:	f000 f802 	bl	8000a8a <HAL_SYSTICK_Callback>
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b089      	sub	sp, #36	; 0x24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
 8000ab2:	e159      	b.n	8000d68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	f040 8148 	bne.w	8000d62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 0303 	and.w	r3, r3, #3
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d005      	beq.n	8000aea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d130      	bne.n	8000b4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	2203      	movs	r2, #3
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43db      	mvns	r3, r3
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	4013      	ands	r3, r2
 8000b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	68da      	ldr	r2, [r3, #12]
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	69ba      	ldr	r2, [r7, #24]
 8000b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b20:	2201      	movs	r2, #1
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	69ba      	ldr	r2, [r7, #24]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	091b      	lsrs	r3, r3, #4
 8000b36:	f003 0201 	and.w	r2, r3, #1
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f003 0303 	and.w	r3, r3, #3
 8000b54:	2b03      	cmp	r3, #3
 8000b56:	d017      	beq.n	8000b88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	2203      	movs	r2, #3
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	689a      	ldr	r2, [r3, #8]
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 0303 	and.w	r3, r3, #3
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d123      	bne.n	8000bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	08da      	lsrs	r2, r3, #3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3208      	adds	r2, #8
 8000b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	f003 0307 	and.w	r3, r3, #7
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	220f      	movs	r2, #15
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	691a      	ldr	r2, [r3, #16]
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	08da      	lsrs	r2, r3, #3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3208      	adds	r2, #8
 8000bd6:	69b9      	ldr	r1, [r7, #24]
 8000bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	2203      	movs	r2, #3
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 0203 	and.w	r2, r3, #3
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	f000 80a2 	beq.w	8000d62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b57      	ldr	r3, [pc, #348]	; (8000d80 <HAL_GPIO_Init+0x2e8>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	4a56      	ldr	r2, [pc, #344]	; (8000d80 <HAL_GPIO_Init+0x2e8>)
 8000c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2e:	4b54      	ldr	r3, [pc, #336]	; (8000d80 <HAL_GPIO_Init+0x2e8>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c3a:	4a52      	ldr	r2, [pc, #328]	; (8000d84 <HAL_GPIO_Init+0x2ec>)
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	089b      	lsrs	r3, r3, #2
 8000c40:	3302      	adds	r3, #2
 8000c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f003 0303 	and.w	r3, r3, #3
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	220f      	movs	r2, #15
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a49      	ldr	r2, [pc, #292]	; (8000d88 <HAL_GPIO_Init+0x2f0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d019      	beq.n	8000c9a <HAL_GPIO_Init+0x202>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a48      	ldr	r2, [pc, #288]	; (8000d8c <HAL_GPIO_Init+0x2f4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d013      	beq.n	8000c96 <HAL_GPIO_Init+0x1fe>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a47      	ldr	r2, [pc, #284]	; (8000d90 <HAL_GPIO_Init+0x2f8>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d00d      	beq.n	8000c92 <HAL_GPIO_Init+0x1fa>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a46      	ldr	r2, [pc, #280]	; (8000d94 <HAL_GPIO_Init+0x2fc>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d007      	beq.n	8000c8e <HAL_GPIO_Init+0x1f6>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a45      	ldr	r2, [pc, #276]	; (8000d98 <HAL_GPIO_Init+0x300>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d101      	bne.n	8000c8a <HAL_GPIO_Init+0x1f2>
 8000c86:	2304      	movs	r3, #4
 8000c88:	e008      	b.n	8000c9c <HAL_GPIO_Init+0x204>
 8000c8a:	2307      	movs	r3, #7
 8000c8c:	e006      	b.n	8000c9c <HAL_GPIO_Init+0x204>
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e004      	b.n	8000c9c <HAL_GPIO_Init+0x204>
 8000c92:	2302      	movs	r3, #2
 8000c94:	e002      	b.n	8000c9c <HAL_GPIO_Init+0x204>
 8000c96:	2301      	movs	r3, #1
 8000c98:	e000      	b.n	8000c9c <HAL_GPIO_Init+0x204>
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	69fa      	ldr	r2, [r7, #28]
 8000c9e:	f002 0203 	and.w	r2, r2, #3
 8000ca2:	0092      	lsls	r2, r2, #2
 8000ca4:	4093      	lsls	r3, r2
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cac:	4935      	ldr	r1, [pc, #212]	; (8000d84 <HAL_GPIO_Init+0x2ec>)
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	089b      	lsrs	r3, r3, #2
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cba:	4b38      	ldr	r3, [pc, #224]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000cde:	4a2f      	ldr	r2, [pc, #188]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ce4:	4b2d      	ldr	r3, [pc, #180]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	43db      	mvns	r3, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d08:	4a24      	ldr	r2, [pc, #144]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d0e:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	43db      	mvns	r3, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d32:	4a1a      	ldr	r2, [pc, #104]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d38:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d5c:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3301      	adds	r3, #1
 8000d66:	61fb      	str	r3, [r7, #28]
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	2b0f      	cmp	r3, #15
 8000d6c:	f67f aea2 	bls.w	8000ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40013800 	.word	0x40013800
 8000d88:	40020000 	.word	0x40020000
 8000d8c:	40020400 	.word	0x40020400
 8000d90:	40020800 	.word	0x40020800
 8000d94:	40020c00 	.word	0x40020c00
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40013c00 	.word	0x40013c00

08000da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000004 	.word	0x20000004

08000db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000dbc:	f7ff fff0 	bl	8000da0 <HAL_RCC_GetHCLKFreq>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	0a9b      	lsrs	r3, r3, #10
 8000dc8:	f003 0307 	and.w	r3, r3, #7
 8000dcc:	4903      	ldr	r1, [pc, #12]	; (8000ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8000dce:	5ccb      	ldrb	r3, [r1, r3]
 8000dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	08001750 	.word	0x08001750

08000de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000de4:	f7ff ffdc 	bl	8000da0 <HAL_RCC_GetHCLKFreq>
 8000de8:	4602      	mov	r2, r0
 8000dea:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	0b5b      	lsrs	r3, r3, #13
 8000df0:	f003 0307 	and.w	r3, r3, #7
 8000df4:	4903      	ldr	r1, [pc, #12]	; (8000e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000df6:	5ccb      	ldrb	r3, [r1, r3]
 8000df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40023800 	.word	0x40023800
 8000e04:	08001750 	.word	0x08001750

08000e08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d101      	bne.n	8000e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e03f      	b.n	8000e9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d106      	bne.n	8000e34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff fc1e 	bl	8000670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2224      	movs	r2, #36	; 0x24
 8000e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f000 f9cb 	bl	80011e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	691a      	ldr	r2, [r3, #16]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000e60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	695a      	ldr	r2, [r3, #20]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000e70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2220      	movs	r2, #32
 8000e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2220      	movs	r2, #32
 8000e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b08a      	sub	sp, #40	; 0x28
 8000ea6:	af02      	add	r7, sp, #8
 8000ea8:	60f8      	str	r0, [r7, #12]
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b20      	cmp	r3, #32
 8000ec0:	d17c      	bne.n	8000fbc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d002      	beq.n	8000ece <HAL_UART_Transmit+0x2c>
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e075      	b.n	8000fbe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d101      	bne.n	8000ee0 <HAL_UART_Transmit+0x3e>
 8000edc:	2302      	movs	r3, #2
 8000ede:	e06e      	b.n	8000fbe <HAL_UART_Transmit+0x11c>
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2200      	movs	r2, #0
 8000eec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2221      	movs	r2, #33	; 0x21
 8000ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000ef6:	f7ff fca5 	bl	8000844 <HAL_GetTick>
 8000efa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	88fa      	ldrh	r2, [r7, #6]
 8000f00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	88fa      	ldrh	r2, [r7, #6]
 8000f06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f10:	d108      	bne.n	8000f24 <HAL_UART_Transmit+0x82>
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d104      	bne.n	8000f24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	61bb      	str	r3, [r7, #24]
 8000f22:	e003      	b.n	8000f2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8000f34:	e02a      	b.n	8000f8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2180      	movs	r1, #128	; 0x80
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f000 f8e2 	bl	800110a <UART_WaitOnFlagUntilTimeout>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e036      	b.n	8000fbe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10b      	bne.n	8000f6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	3302      	adds	r3, #2
 8000f6a:	61bb      	str	r3, [r7, #24]
 8000f6c:	e007      	b.n	8000f7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	781a      	ldrb	r2, [r3, #0]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	3b01      	subs	r3, #1
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1cf      	bne.n	8000f36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2140      	movs	r1, #64	; 0x40
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f000 f8b2 	bl	800110a <UART_WaitOnFlagUntilTimeout>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e006      	b.n	8000fbe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2220      	movs	r2, #32
 8000fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	e000      	b.n	8000fbe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8000fbc:	2302      	movs	r3, #2
  }
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3720      	adds	r7, #32
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b08a      	sub	sp, #40	; 0x28
 8000fca:	af02      	add	r7, sp, #8
 8000fcc:	60f8      	str	r0, [r7, #12]
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b20      	cmp	r3, #32
 8000fe4:	f040 808c 	bne.w	8001100 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d002      	beq.n	8000ff4 <HAL_UART_Receive+0x2e>
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e084      	b.n	8001102 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d101      	bne.n	8001006 <HAL_UART_Receive+0x40>
 8001002:	2302      	movs	r3, #2
 8001004:	e07d      	b.n	8001102 <HAL_UART_Receive+0x13c>
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2201      	movs	r2, #1
 800100a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2200      	movs	r2, #0
 8001012:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2222      	movs	r2, #34	; 0x22
 8001018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2200      	movs	r2, #0
 8001020:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001022:	f7ff fc0f 	bl	8000844 <HAL_GetTick>
 8001026:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	88fa      	ldrh	r2, [r7, #6]
 800102c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	88fa      	ldrh	r2, [r7, #6]
 8001032:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800103c:	d108      	bne.n	8001050 <HAL_UART_Receive+0x8a>
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d104      	bne.n	8001050 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	61bb      	str	r3, [r7, #24]
 800104e:	e003      	b.n	8001058 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001060:	e043      	b.n	80010ea <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	2200      	movs	r2, #0
 800106a:	2120      	movs	r1, #32
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f000 f84c 	bl	800110a <UART_WaitOnFlagUntilTimeout>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e042      	b.n	8001102 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10c      	bne.n	800109c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	b29b      	uxth	r3, r3
 800108a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800108e:	b29a      	uxth	r2, r3
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	3302      	adds	r3, #2
 8001098:	61bb      	str	r3, [r7, #24]
 800109a:	e01f      	b.n	80010dc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010a4:	d007      	beq.n	80010b6 <HAL_UART_Receive+0xf0>
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10a      	bne.n	80010c4 <HAL_UART_Receive+0xfe>
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d106      	bne.n	80010c4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	e008      	b.n	80010d6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3301      	adds	r3, #1
 80010da:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	3b01      	subs	r3, #1
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1b6      	bne.n	8001062 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2220      	movs	r2, #32
 80010f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	e000      	b.n	8001102 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001100:	2302      	movs	r3, #2
  }
}
 8001102:	4618      	mov	r0, r3
 8001104:	3720      	adds	r7, #32
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b090      	sub	sp, #64	; 0x40
 800110e:	af00      	add	r7, sp, #0
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	4613      	mov	r3, r2
 8001118:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800111a:	e050      	b.n	80011be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800111c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800111e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001122:	d04c      	beq.n	80011be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <UART_WaitOnFlagUntilTimeout+0x30>
 800112a:	f7ff fb8b 	bl	8000844 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001136:	429a      	cmp	r2, r3
 8001138:	d241      	bcs.n	80011be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	330c      	adds	r3, #12
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001144:	e853 3f00 	ldrex	r3, [r3]
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001150:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	330c      	adds	r3, #12
 8001158:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800115a:	637a      	str	r2, [r7, #52]	; 0x34
 800115c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800115e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001160:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001162:	e841 2300 	strex	r3, r2, [r1]
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1e5      	bne.n	800113a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3314      	adds	r3, #20
 8001174:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	e853 3f00 	ldrex	r3, [r3]
 800117c:	613b      	str	r3, [r7, #16]
   return(result);
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	f023 0301 	bic.w	r3, r3, #1
 8001184:	63bb      	str	r3, [r7, #56]	; 0x38
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	3314      	adds	r3, #20
 800118c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800118e:	623a      	str	r2, [r7, #32]
 8001190:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001192:	69f9      	ldr	r1, [r7, #28]
 8001194:	6a3a      	ldr	r2, [r7, #32]
 8001196:	e841 2300 	strex	r3, r2, [r1]
 800119a:	61bb      	str	r3, [r7, #24]
   return(result);
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1e5      	bne.n	800116e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2220      	movs	r2, #32
 80011a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2220      	movs	r2, #32
 80011ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e00f      	b.n	80011de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	4013      	ands	r3, r2
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	bf0c      	ite	eq
 80011ce:	2301      	moveq	r3, #1
 80011d0:	2300      	movne	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	461a      	mov	r2, r3
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d09f      	beq.n	800111c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3740      	adds	r7, #64	; 0x40
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80011e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011ec:	b0c0      	sub	sp, #256	; 0x100
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001204:	68d9      	ldr	r1, [r3, #12]
 8001206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	ea40 0301 	orr.w	r3, r0, r1
 8001210:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	431a      	orrs	r2, r3
 8001220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	431a      	orrs	r2, r3
 8001228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	4313      	orrs	r3, r2
 8001230:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001240:	f021 010c 	bic.w	r1, r1, #12
 8001244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800124e:	430b      	orrs	r3, r1
 8001250:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800125e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001262:	6999      	ldr	r1, [r3, #24]
 8001264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	ea40 0301 	orr.w	r3, r0, r1
 800126e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4b8f      	ldr	r3, [pc, #572]	; (80014b4 <UART_SetConfig+0x2cc>)
 8001278:	429a      	cmp	r2, r3
 800127a:	d005      	beq.n	8001288 <UART_SetConfig+0xa0>
 800127c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4b8d      	ldr	r3, [pc, #564]	; (80014b8 <UART_SetConfig+0x2d0>)
 8001284:	429a      	cmp	r2, r3
 8001286:	d104      	bne.n	8001292 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001288:	f7ff fdaa 	bl	8000de0 <HAL_RCC_GetPCLK2Freq>
 800128c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001290:	e003      	b.n	800129a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001292:	f7ff fd91 	bl	8000db8 <HAL_RCC_GetPCLK1Freq>
 8001296:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800129a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012a4:	f040 810c 	bne.w	80014c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80012a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80012ac:	2200      	movs	r2, #0
 80012ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80012b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80012b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80012ba:	4622      	mov	r2, r4
 80012bc:	462b      	mov	r3, r5
 80012be:	1891      	adds	r1, r2, r2
 80012c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80012c2:	415b      	adcs	r3, r3
 80012c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80012ca:	4621      	mov	r1, r4
 80012cc:	eb12 0801 	adds.w	r8, r2, r1
 80012d0:	4629      	mov	r1, r5
 80012d2:	eb43 0901 	adc.w	r9, r3, r1
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012ea:	4690      	mov	r8, r2
 80012ec:	4699      	mov	r9, r3
 80012ee:	4623      	mov	r3, r4
 80012f0:	eb18 0303 	adds.w	r3, r8, r3
 80012f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80012f8:	462b      	mov	r3, r5
 80012fa:	eb49 0303 	adc.w	r3, r9, r3
 80012fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800130e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001312:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001316:	460b      	mov	r3, r1
 8001318:	18db      	adds	r3, r3, r3
 800131a:	653b      	str	r3, [r7, #80]	; 0x50
 800131c:	4613      	mov	r3, r2
 800131e:	eb42 0303 	adc.w	r3, r2, r3
 8001322:	657b      	str	r3, [r7, #84]	; 0x54
 8001324:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001328:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800132c:	f7fe ff5a 	bl	80001e4 <__aeabi_uldivmod>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4b61      	ldr	r3, [pc, #388]	; (80014bc <UART_SetConfig+0x2d4>)
 8001336:	fba3 2302 	umull	r2, r3, r3, r2
 800133a:	095b      	lsrs	r3, r3, #5
 800133c:	011c      	lsls	r4, r3, #4
 800133e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001342:	2200      	movs	r2, #0
 8001344:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001348:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800134c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001350:	4642      	mov	r2, r8
 8001352:	464b      	mov	r3, r9
 8001354:	1891      	adds	r1, r2, r2
 8001356:	64b9      	str	r1, [r7, #72]	; 0x48
 8001358:	415b      	adcs	r3, r3
 800135a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800135c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001360:	4641      	mov	r1, r8
 8001362:	eb12 0a01 	adds.w	sl, r2, r1
 8001366:	4649      	mov	r1, r9
 8001368:	eb43 0b01 	adc.w	fp, r3, r1
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001378:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800137c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001380:	4692      	mov	sl, r2
 8001382:	469b      	mov	fp, r3
 8001384:	4643      	mov	r3, r8
 8001386:	eb1a 0303 	adds.w	r3, sl, r3
 800138a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800138e:	464b      	mov	r3, r9
 8001390:	eb4b 0303 	adc.w	r3, fp, r3
 8001394:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80013a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80013a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80013ac:	460b      	mov	r3, r1
 80013ae:	18db      	adds	r3, r3, r3
 80013b0:	643b      	str	r3, [r7, #64]	; 0x40
 80013b2:	4613      	mov	r3, r2
 80013b4:	eb42 0303 	adc.w	r3, r2, r3
 80013b8:	647b      	str	r3, [r7, #68]	; 0x44
 80013ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80013be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80013c2:	f7fe ff0f 	bl	80001e4 <__aeabi_uldivmod>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4611      	mov	r1, r2
 80013cc:	4b3b      	ldr	r3, [pc, #236]	; (80014bc <UART_SetConfig+0x2d4>)
 80013ce:	fba3 2301 	umull	r2, r3, r3, r1
 80013d2:	095b      	lsrs	r3, r3, #5
 80013d4:	2264      	movs	r2, #100	; 0x64
 80013d6:	fb02 f303 	mul.w	r3, r2, r3
 80013da:	1acb      	subs	r3, r1, r3
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80013e2:	4b36      	ldr	r3, [pc, #216]	; (80014bc <UART_SetConfig+0x2d4>)
 80013e4:	fba3 2302 	umull	r2, r3, r3, r2
 80013e8:	095b      	lsrs	r3, r3, #5
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80013f0:	441c      	add	r4, r3
 80013f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80013f6:	2200      	movs	r2, #0
 80013f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80013fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001400:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001404:	4642      	mov	r2, r8
 8001406:	464b      	mov	r3, r9
 8001408:	1891      	adds	r1, r2, r2
 800140a:	63b9      	str	r1, [r7, #56]	; 0x38
 800140c:	415b      	adcs	r3, r3
 800140e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001410:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001414:	4641      	mov	r1, r8
 8001416:	1851      	adds	r1, r2, r1
 8001418:	6339      	str	r1, [r7, #48]	; 0x30
 800141a:	4649      	mov	r1, r9
 800141c:	414b      	adcs	r3, r1
 800141e:	637b      	str	r3, [r7, #52]	; 0x34
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800142c:	4659      	mov	r1, fp
 800142e:	00cb      	lsls	r3, r1, #3
 8001430:	4651      	mov	r1, sl
 8001432:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001436:	4651      	mov	r1, sl
 8001438:	00ca      	lsls	r2, r1, #3
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	4603      	mov	r3, r0
 8001440:	4642      	mov	r2, r8
 8001442:	189b      	adds	r3, r3, r2
 8001444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001448:	464b      	mov	r3, r9
 800144a:	460a      	mov	r2, r1
 800144c:	eb42 0303 	adc.w	r3, r2, r3
 8001450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001460:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001464:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001468:	460b      	mov	r3, r1
 800146a:	18db      	adds	r3, r3, r3
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
 800146e:	4613      	mov	r3, r2
 8001470:	eb42 0303 	adc.w	r3, r2, r3
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001476:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800147a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800147e:	f7fe feb1 	bl	80001e4 <__aeabi_uldivmod>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <UART_SetConfig+0x2d4>)
 8001488:	fba3 1302 	umull	r1, r3, r3, r2
 800148c:	095b      	lsrs	r3, r3, #5
 800148e:	2164      	movs	r1, #100	; 0x64
 8001490:	fb01 f303 	mul.w	r3, r1, r3
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	3332      	adds	r3, #50	; 0x32
 800149a:	4a08      	ldr	r2, [pc, #32]	; (80014bc <UART_SetConfig+0x2d4>)
 800149c:	fba2 2303 	umull	r2, r3, r2, r3
 80014a0:	095b      	lsrs	r3, r3, #5
 80014a2:	f003 0207 	and.w	r2, r3, #7
 80014a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4422      	add	r2, r4
 80014ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80014b0:	e105      	b.n	80016be <UART_SetConfig+0x4d6>
 80014b2:	bf00      	nop
 80014b4:	40011000 	.word	0x40011000
 80014b8:	40011400 	.word	0x40011400
 80014bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80014c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80014c4:	2200      	movs	r2, #0
 80014c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80014ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80014ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80014d2:	4642      	mov	r2, r8
 80014d4:	464b      	mov	r3, r9
 80014d6:	1891      	adds	r1, r2, r2
 80014d8:	6239      	str	r1, [r7, #32]
 80014da:	415b      	adcs	r3, r3
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
 80014de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014e2:	4641      	mov	r1, r8
 80014e4:	1854      	adds	r4, r2, r1
 80014e6:	4649      	mov	r1, r9
 80014e8:	eb43 0501 	adc.w	r5, r3, r1
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	00eb      	lsls	r3, r5, #3
 80014f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014fa:	00e2      	lsls	r2, r4, #3
 80014fc:	4614      	mov	r4, r2
 80014fe:	461d      	mov	r5, r3
 8001500:	4643      	mov	r3, r8
 8001502:	18e3      	adds	r3, r4, r3
 8001504:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001508:	464b      	mov	r3, r9
 800150a:	eb45 0303 	adc.w	r3, r5, r3
 800150e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800151e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	f04f 0300 	mov.w	r3, #0
 800152a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800152e:	4629      	mov	r1, r5
 8001530:	008b      	lsls	r3, r1, #2
 8001532:	4621      	mov	r1, r4
 8001534:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001538:	4621      	mov	r1, r4
 800153a:	008a      	lsls	r2, r1, #2
 800153c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001540:	f7fe fe50 	bl	80001e4 <__aeabi_uldivmod>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4b60      	ldr	r3, [pc, #384]	; (80016cc <UART_SetConfig+0x4e4>)
 800154a:	fba3 2302 	umull	r2, r3, r3, r2
 800154e:	095b      	lsrs	r3, r3, #5
 8001550:	011c      	lsls	r4, r3, #4
 8001552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001556:	2200      	movs	r2, #0
 8001558:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800155c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001560:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001564:	4642      	mov	r2, r8
 8001566:	464b      	mov	r3, r9
 8001568:	1891      	adds	r1, r2, r2
 800156a:	61b9      	str	r1, [r7, #24]
 800156c:	415b      	adcs	r3, r3
 800156e:	61fb      	str	r3, [r7, #28]
 8001570:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001574:	4641      	mov	r1, r8
 8001576:	1851      	adds	r1, r2, r1
 8001578:	6139      	str	r1, [r7, #16]
 800157a:	4649      	mov	r1, r9
 800157c:	414b      	adcs	r3, r1
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800158c:	4659      	mov	r1, fp
 800158e:	00cb      	lsls	r3, r1, #3
 8001590:	4651      	mov	r1, sl
 8001592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001596:	4651      	mov	r1, sl
 8001598:	00ca      	lsls	r2, r1, #3
 800159a:	4610      	mov	r0, r2
 800159c:	4619      	mov	r1, r3
 800159e:	4603      	mov	r3, r0
 80015a0:	4642      	mov	r2, r8
 80015a2:	189b      	adds	r3, r3, r2
 80015a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015a8:	464b      	mov	r3, r9
 80015aa:	460a      	mov	r2, r1
 80015ac:	eb42 0303 	adc.w	r3, r2, r3
 80015b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80015b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80015be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	f04f 0300 	mov.w	r3, #0
 80015c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80015cc:	4649      	mov	r1, r9
 80015ce:	008b      	lsls	r3, r1, #2
 80015d0:	4641      	mov	r1, r8
 80015d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015d6:	4641      	mov	r1, r8
 80015d8:	008a      	lsls	r2, r1, #2
 80015da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80015de:	f7fe fe01 	bl	80001e4 <__aeabi_uldivmod>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4b39      	ldr	r3, [pc, #228]	; (80016cc <UART_SetConfig+0x4e4>)
 80015e8:	fba3 1302 	umull	r1, r3, r3, r2
 80015ec:	095b      	lsrs	r3, r3, #5
 80015ee:	2164      	movs	r1, #100	; 0x64
 80015f0:	fb01 f303 	mul.w	r3, r1, r3
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	3332      	adds	r3, #50	; 0x32
 80015fa:	4a34      	ldr	r2, [pc, #208]	; (80016cc <UART_SetConfig+0x4e4>)
 80015fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001600:	095b      	lsrs	r3, r3, #5
 8001602:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001606:	441c      	add	r4, r3
 8001608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800160c:	2200      	movs	r2, #0
 800160e:	673b      	str	r3, [r7, #112]	; 0x70
 8001610:	677a      	str	r2, [r7, #116]	; 0x74
 8001612:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001616:	4642      	mov	r2, r8
 8001618:	464b      	mov	r3, r9
 800161a:	1891      	adds	r1, r2, r2
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	415b      	adcs	r3, r3
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001626:	4641      	mov	r1, r8
 8001628:	1851      	adds	r1, r2, r1
 800162a:	6039      	str	r1, [r7, #0]
 800162c:	4649      	mov	r1, r9
 800162e:	414b      	adcs	r3, r1
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	f04f 0300 	mov.w	r3, #0
 800163a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800163e:	4659      	mov	r1, fp
 8001640:	00cb      	lsls	r3, r1, #3
 8001642:	4651      	mov	r1, sl
 8001644:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001648:	4651      	mov	r1, sl
 800164a:	00ca      	lsls	r2, r1, #3
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	4603      	mov	r3, r0
 8001652:	4642      	mov	r2, r8
 8001654:	189b      	adds	r3, r3, r2
 8001656:	66bb      	str	r3, [r7, #104]	; 0x68
 8001658:	464b      	mov	r3, r9
 800165a:	460a      	mov	r2, r1
 800165c:	eb42 0303 	adc.w	r3, r2, r3
 8001660:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	663b      	str	r3, [r7, #96]	; 0x60
 800166c:	667a      	str	r2, [r7, #100]	; 0x64
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800167a:	4649      	mov	r1, r9
 800167c:	008b      	lsls	r3, r1, #2
 800167e:	4641      	mov	r1, r8
 8001680:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001684:	4641      	mov	r1, r8
 8001686:	008a      	lsls	r2, r1, #2
 8001688:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800168c:	f7fe fdaa 	bl	80001e4 <__aeabi_uldivmod>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <UART_SetConfig+0x4e4>)
 8001696:	fba3 1302 	umull	r1, r3, r3, r2
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	2164      	movs	r1, #100	; 0x64
 800169e:	fb01 f303 	mul.w	r3, r1, r3
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	011b      	lsls	r3, r3, #4
 80016a6:	3332      	adds	r3, #50	; 0x32
 80016a8:	4a08      	ldr	r2, [pc, #32]	; (80016cc <UART_SetConfig+0x4e4>)
 80016aa:	fba2 2303 	umull	r2, r3, r2, r3
 80016ae:	095b      	lsrs	r3, r3, #5
 80016b0:	f003 020f 	and.w	r2, r3, #15
 80016b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4422      	add	r2, r4
 80016bc:	609a      	str	r2, [r3, #8]
}
 80016be:	bf00      	nop
 80016c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80016c4:	46bd      	mov	sp, r7
 80016c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016ca:	bf00      	nop
 80016cc:	51eb851f 	.word	0x51eb851f

080016d0 <__libc_init_array>:
 80016d0:	b570      	push	{r4, r5, r6, lr}
 80016d2:	4d0d      	ldr	r5, [pc, #52]	; (8001708 <__libc_init_array+0x38>)
 80016d4:	4c0d      	ldr	r4, [pc, #52]	; (800170c <__libc_init_array+0x3c>)
 80016d6:	1b64      	subs	r4, r4, r5
 80016d8:	10a4      	asrs	r4, r4, #2
 80016da:	2600      	movs	r6, #0
 80016dc:	42a6      	cmp	r6, r4
 80016de:	d109      	bne.n	80016f4 <__libc_init_array+0x24>
 80016e0:	4d0b      	ldr	r5, [pc, #44]	; (8001710 <__libc_init_array+0x40>)
 80016e2:	4c0c      	ldr	r4, [pc, #48]	; (8001714 <__libc_init_array+0x44>)
 80016e4:	f000 f818 	bl	8001718 <_init>
 80016e8:	1b64      	subs	r4, r4, r5
 80016ea:	10a4      	asrs	r4, r4, #2
 80016ec:	2600      	movs	r6, #0
 80016ee:	42a6      	cmp	r6, r4
 80016f0:	d105      	bne.n	80016fe <__libc_init_array+0x2e>
 80016f2:	bd70      	pop	{r4, r5, r6, pc}
 80016f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80016f8:	4798      	blx	r3
 80016fa:	3601      	adds	r6, #1
 80016fc:	e7ee      	b.n	80016dc <__libc_init_array+0xc>
 80016fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001702:	4798      	blx	r3
 8001704:	3601      	adds	r6, #1
 8001706:	e7f2      	b.n	80016ee <__libc_init_array+0x1e>
 8001708:	08001760 	.word	0x08001760
 800170c:	08001760 	.word	0x08001760
 8001710:	08001760 	.word	0x08001760
 8001714:	08001764 	.word	0x08001764

08001718 <_init>:
 8001718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800171a:	bf00      	nop
 800171c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800171e:	bc08      	pop	{r3}
 8001720:	469e      	mov	lr, r3
 8001722:	4770      	bx	lr

08001724 <_fini>:
 8001724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001726:	bf00      	nop
 8001728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800172a:	bc08      	pop	{r3}
 800172c:	469e      	mov	lr, r3
 800172e:	4770      	bx	lr
